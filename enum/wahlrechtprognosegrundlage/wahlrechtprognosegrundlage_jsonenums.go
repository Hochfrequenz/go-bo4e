// Code generated by jsonenums --type WahlrechtPrognosegrundlage; DO NOT EDIT.

package wahlrechtprognosegrundlage

import (
	"encoding/json"
	"fmt"
)

var (
	_WahlrechtPrognosegrundlageNameToValue = map[string]WahlrechtPrognosegrundlage{
		"DURCH_LF":                       DURCH_LF,
		"DURCH_LF_NICHT_GEGEBEN":         DURCH_LF_NICHT_GEGEBEN,
		"NICHT_WEGEN_GROSSEN_VERBRAUCHS": NICHT_WEGEN_GROSSEN_VERBRAUCHS,
		"NICHT_WEGEN_EIGENVERBRAUCH":     NICHT_WEGEN_EIGENVERBRAUCH,
		"NICHT_WEGEN_TAGES_VERBRAUCH":    NICHT_WEGEN_TAGES_VERBRAUCH,
		"NICHT_WEGEN_ENWG":               NICHT_WEGEN_ENWG,
	}

	_WahlrechtPrognosegrundlageValueToName = map[WahlrechtPrognosegrundlage]string{
		DURCH_LF:                       "DURCH_LF",
		DURCH_LF_NICHT_GEGEBEN:         "DURCH_LF_NICHT_GEGEBEN",
		NICHT_WEGEN_GROSSEN_VERBRAUCHS: "NICHT_WEGEN_GROSSEN_VERBRAUCHS",
		NICHT_WEGEN_EIGENVERBRAUCH:     "NICHT_WEGEN_EIGENVERBRAUCH",
		NICHT_WEGEN_TAGES_VERBRAUCH:    "NICHT_WEGEN_TAGES_VERBRAUCH",
		NICHT_WEGEN_ENWG:               "NICHT_WEGEN_ENWG",
	}
)

func init() {
	var v WahlrechtPrognosegrundlage
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_WahlrechtPrognosegrundlageNameToValue = map[string]WahlrechtPrognosegrundlage{
			interface{}(DURCH_LF).(fmt.Stringer).String():                       DURCH_LF,
			interface{}(DURCH_LF_NICHT_GEGEBEN).(fmt.Stringer).String():         DURCH_LF_NICHT_GEGEBEN,
			interface{}(NICHT_WEGEN_GROSSEN_VERBRAUCHS).(fmt.Stringer).String(): NICHT_WEGEN_GROSSEN_VERBRAUCHS,
			interface{}(NICHT_WEGEN_EIGENVERBRAUCH).(fmt.Stringer).String():     NICHT_WEGEN_EIGENVERBRAUCH,
			interface{}(NICHT_WEGEN_TAGES_VERBRAUCH).(fmt.Stringer).String():    NICHT_WEGEN_TAGES_VERBRAUCH,
			interface{}(NICHT_WEGEN_ENWG).(fmt.Stringer).String():               NICHT_WEGEN_ENWG,
		}
	}
}

// MarshalJSON is generated so WahlrechtPrognosegrundlage satisfies json.Marshaler.
func (r WahlrechtPrognosegrundlage) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _WahlrechtPrognosegrundlageValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid WahlrechtPrognosegrundlage: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so WahlrechtPrognosegrundlage satisfies json.Unmarshaler.
func (r *WahlrechtPrognosegrundlage) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("WahlrechtPrognosegrundlage should be a string, got %s", data)
	}
	v, ok := _WahlrechtPrognosegrundlageNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid WahlrechtPrognosegrundlage %q", s)
	}
	*r = v
	return nil
}
