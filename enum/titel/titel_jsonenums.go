// Code generated by jsonenums --type Titel; DO NOT EDIT.

package titel

import (
	"encoding/json"
	"fmt"
)

var (
	_TitelNameToValue = map[string]Titel{
		"DR":      DR,
		"PROF":    PROF,
		"PROF_DR": PROF_DR,
	}

	_TitelValueToName = map[Titel]string{
		DR:      "DR",
		PROF:    "PROF",
		PROF_DR: "PROF_DR",
	}
)

func init() {
	var v Titel
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_TitelNameToValue = map[string]Titel{
			interface{}(DR).(fmt.Stringer).String():      DR,
			interface{}(PROF).(fmt.Stringer).String():    PROF,
			interface{}(PROF_DR).(fmt.Stringer).String(): PROF_DR,
		}
	}
}

// MarshalJSON is generated so Titel satisfies json.Marshaler.
func (r Titel) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _TitelValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Titel: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Titel satisfies json.Unmarshaler.
func (r *Titel) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Titel should be a string, got %s", data)
	}
	v, ok := _TitelNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Titel %q", s)
	}
	*r = v
	return nil
}
