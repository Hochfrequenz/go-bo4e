// Code generated by jsonenums --type Mengeneinheit; DO NOT EDIT.

package mengeneinheit

import (
	"encoding/json"
	"fmt"
)

var (
	_MengeneinheitNameToValue = map[string]Mengeneinheit{
		"W":          W,
		"WH":         WH,
		"KW":         KW,
		"KWH":        KWH,
		"KVARH":      KVARH,
		"MW":         MW,
		"MWH":        MWH,
		"STUECK":     STUECK,
		"ANZAHL":     ANZAHL,
		"KUBIKMETER": KUBIKMETER,
		"STUNDE":     STUNDE,
		"TAG":        TAG,
		"MONAT":      MONAT,
		"JAHR":       JAHR,
		"PROZENT":    PROZENT,
	}

	_MengeneinheitValueToName = map[Mengeneinheit]string{
		W:          "W",
		WH:         "WH",
		KW:         "KW",
		KWH:        "KWH",
		KVARH:      "KVARH",
		MW:         "MW",
		MWH:        "MWH",
		STUECK:     "STUECK",
		ANZAHL:     "ANZAHL",
		KUBIKMETER: "KUBIKMETER",
		STUNDE:     "STUNDE",
		TAG:        "TAG",
		MONAT:      "MONAT",
		JAHR:       "JAHR",
		PROZENT:    "PROZENT",
	}
)

func init() {
	var v Mengeneinheit
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_MengeneinheitNameToValue = map[string]Mengeneinheit{
			interface{}(W).(fmt.Stringer).String():          W,
			interface{}(WH).(fmt.Stringer).String():         WH,
			interface{}(KW).(fmt.Stringer).String():         KW,
			interface{}(KWH).(fmt.Stringer).String():        KWH,
			interface{}(KVARH).(fmt.Stringer).String():      KVARH,
			interface{}(MW).(fmt.Stringer).String():         MW,
			interface{}(MWH).(fmt.Stringer).String():        MWH,
			interface{}(STUECK).(fmt.Stringer).String():     STUECK,
			interface{}(ANZAHL).(fmt.Stringer).String():     ANZAHL,
			interface{}(KUBIKMETER).(fmt.Stringer).String(): KUBIKMETER,
			interface{}(STUNDE).(fmt.Stringer).String():     STUNDE,
			interface{}(TAG).(fmt.Stringer).String():        TAG,
			interface{}(MONAT).(fmt.Stringer).String():      MONAT,
			interface{}(JAHR).(fmt.Stringer).String():       JAHR,
			interface{}(PROZENT).(fmt.Stringer).String():    PROZENT,
		}
	}
}

// MarshalJSON is generated so Mengeneinheit satisfies json.Marshaler.
func (r Mengeneinheit) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _MengeneinheitValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Mengeneinheit: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Mengeneinheit satisfies json.Unmarshaler.
func (r *Mengeneinheit) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Mengeneinheit should be a string, got %s", data)
	}
	v, ok := _MengeneinheitNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Mengeneinheit %q", s)
	}
	*r = v
	return nil
}
