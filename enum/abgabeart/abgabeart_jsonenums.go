// Code generated by jsonenums --type AbgabeArt; DO NOT EDIT.

package abgabeart

import (
	"encoding/json"
	"fmt"
)

var (
	_AbgabeArtNameToValue = map[string]AbgabeArt{
		"AbgabeArtKAS": AbgabeArtKAS,
		"AbgabeArtSA":  AbgabeArtSA,
		"AbgabeArtSAS": AbgabeArtSAS,
		"AbgabeArtTA":  AbgabeArtTA,
		"AbgabeArtTAS": AbgabeArtTAS,
		"AbgabeArtTK":  AbgabeArtTK,
		"AbgabeArtTKS": AbgabeArtTKS,
		"AbgabeArtTS":  AbgabeArtTS,
		"AbgabeArtTSS": AbgabeArtTSS,
	}

	_AbgabeArtValueToName = map[AbgabeArt]string{
		AbgabeArtKAS: "AbgabeArtKAS",
		AbgabeArtSA:  "AbgabeArtSA",
		AbgabeArtSAS: "AbgabeArtSAS",
		AbgabeArtTA:  "AbgabeArtTA",
		AbgabeArtTAS: "AbgabeArtTAS",
		AbgabeArtTK:  "AbgabeArtTK",
		AbgabeArtTKS: "AbgabeArtTKS",
		AbgabeArtTS:  "AbgabeArtTS",
		AbgabeArtTSS: "AbgabeArtTSS",
	}
)

func init() {
	var v AbgabeArt
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_AbgabeArtNameToValue = map[string]AbgabeArt{
			interface{}(AbgabeArtKAS).(fmt.Stringer).String(): AbgabeArtKAS,
			interface{}(AbgabeArtSA).(fmt.Stringer).String():  AbgabeArtSA,
			interface{}(AbgabeArtSAS).(fmt.Stringer).String(): AbgabeArtSAS,
			interface{}(AbgabeArtTA).(fmt.Stringer).String():  AbgabeArtTA,
			interface{}(AbgabeArtTAS).(fmt.Stringer).String(): AbgabeArtTAS,
			interface{}(AbgabeArtTK).(fmt.Stringer).String():  AbgabeArtTK,
			interface{}(AbgabeArtTKS).(fmt.Stringer).String(): AbgabeArtTKS,
			interface{}(AbgabeArtTS).(fmt.Stringer).String():  AbgabeArtTS,
			interface{}(AbgabeArtTSS).(fmt.Stringer).String(): AbgabeArtTSS,
		}
	}
}

// MarshalJSON is generated so AbgabeArt satisfies json.Marshaler.
func (r AbgabeArt) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _AbgabeArtValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid AbgabeArt: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so AbgabeArt satisfies json.Unmarshaler.
func (r *AbgabeArt) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AbgabeArt should be a string, got %s", data)
	}
	v, ok := _AbgabeArtNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid AbgabeArt %q", s)
	}
	*r = v
	return nil
}
