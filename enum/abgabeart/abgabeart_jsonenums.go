// Code generated by jsonenums --type AbgabeArt; DO NOT EDIT.

package abgabeart

import (
	"encoding/json"
	"fmt"
)

var (
	_AbgabeArtNameToValue = map[string]AbgabeArt{
		"KAS": KAS,
		"SA":  SA,
		"SAS": SAS,
		"TA":  TA,
		"TAS": TAS,
		"TK":  TK,
		"TKS": TKS,
		"TS":  TS,
		"TSS": TSS,
	}

	_AbgabeArtValueToName = map[AbgabeArt]string{
		KAS: "KAS",
		SA:  "SA",
		SAS: "SAS",
		TA:  "TA",
		TAS: "TAS",
		TK:  "TK",
		TKS: "TKS",
		TS:  "TS",
		TSS: "TSS",
	}
)

func init() {
	var v AbgabeArt
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_AbgabeArtNameToValue = map[string]AbgabeArt{
			interface{}(KAS).(fmt.Stringer).String(): KAS,
			interface{}(SA).(fmt.Stringer).String():  SA,
			interface{}(SAS).(fmt.Stringer).String(): SAS,
			interface{}(TA).(fmt.Stringer).String():  TA,
			interface{}(TAS).(fmt.Stringer).String(): TAS,
			interface{}(TK).(fmt.Stringer).String():  TK,
			interface{}(TKS).(fmt.Stringer).String(): TKS,
			interface{}(TS).(fmt.Stringer).String():  TS,
			interface{}(TSS).(fmt.Stringer).String(): TSS,
		}
	}
}

// MarshalJSON is generated so AbgabeArt satisfies json.Marshaler.
func (r AbgabeArt) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _AbgabeArtValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid AbgabeArt: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so AbgabeArt satisfies json.Unmarshaler.
func (r *AbgabeArt) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AbgabeArt should be a string, got %s", data)
	}
	v, ok := _AbgabeArtNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid AbgabeArt %q", s)
	}
	*r = v
	return nil
}
