// Code generated by jsonenums --type Waermenutzung; DO NOT EDIT.

package waermenutzung

import (
	"encoding/json"
	"fmt"
)

var (
	_WaermenutzungNameToValue = map[string]Waermenutzung{
		"SPEICHERHEIZUNG": SPEICHERHEIZUNG,
		"WAERMEPUMPE":     WAERMEPUMPE,
		"DIREKTHEIZUNG":   DIREKTHEIZUNG,
	}

	_WaermenutzungValueToName = map[Waermenutzung]string{
		SPEICHERHEIZUNG: "SPEICHERHEIZUNG",
		WAERMEPUMPE:     "WAERMEPUMPE",
		DIREKTHEIZUNG:   "DIREKTHEIZUNG",
	}
)

func init() {
	var v Waermenutzung
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_WaermenutzungNameToValue = map[string]Waermenutzung{
			interface{}(SPEICHERHEIZUNG).(fmt.Stringer).String(): SPEICHERHEIZUNG,
			interface{}(WAERMEPUMPE).(fmt.Stringer).String():     WAERMEPUMPE,
			interface{}(DIREKTHEIZUNG).(fmt.Stringer).String():   DIREKTHEIZUNG,
		}
	}
}

// MarshalJSON is generated so Waermenutzung satisfies json.Marshaler.
func (r Waermenutzung) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _WaermenutzungValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Waermenutzung: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Waermenutzung satisfies json.Unmarshaler.
func (r *Waermenutzung) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Waermenutzung should be a string, got %s", data)
	}
	v, ok := _WaermenutzungNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Waermenutzung %q", s)
	}
	*r = v
	return nil
}
