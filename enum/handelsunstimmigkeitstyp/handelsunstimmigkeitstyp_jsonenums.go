// Code generated by jsonenums --type Handelsunstimmigkeitstyp; DO NOT EDIT.

package handelsunstimmigkeitstyp

import (
	"encoding/json"
	"fmt"
)

var (
	_HandelsunstimmigkeitstypNameToValue = map[string]Handelsunstimmigkeitstyp{
		"HANDELSRECHNUNG":                       HANDELSRECHNUNG,
		"LIEFERSCHEIN_HANDELSUNSTIMMIGKEITSTYP": LIEFERSCHEIN_HANDELSUNSTIMMIGKEITSTYP,
		"LIEFERSCHEIN_GRUND_ARBEITSPREIS":       LIEFERSCHEIN_GRUND_ARBEITSPREIS,
		"LIEFERSCHEIN_ARBEITS_LEISTUNGSPREIS":   LIEFERSCHEIN_ARBEITS_LEISTUNGSPREIS,
	}

	_HandelsunstimmigkeitstypValueToName = map[Handelsunstimmigkeitstyp]string{
		HANDELSRECHNUNG:                       "HANDELSRECHNUNG",
		LIEFERSCHEIN_HANDELSUNSTIMMIGKEITSTYP: "LIEFERSCHEIN_HANDELSUNSTIMMIGKEITSTYP",
		LIEFERSCHEIN_GRUND_ARBEITSPREIS:       "LIEFERSCHEIN_GRUND_ARBEITSPREIS",
		LIEFERSCHEIN_ARBEITS_LEISTUNGSPREIS:   "LIEFERSCHEIN_ARBEITS_LEISTUNGSPREIS",
	}
)

func init() {
	var v Handelsunstimmigkeitstyp
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_HandelsunstimmigkeitstypNameToValue = map[string]Handelsunstimmigkeitstyp{
			interface{}(HANDELSRECHNUNG).(fmt.Stringer).String():                       HANDELSRECHNUNG,
			interface{}(LIEFERSCHEIN_HANDELSUNSTIMMIGKEITSTYP).(fmt.Stringer).String(): LIEFERSCHEIN_HANDELSUNSTIMMIGKEITSTYP,
			interface{}(LIEFERSCHEIN_GRUND_ARBEITSPREIS).(fmt.Stringer).String():       LIEFERSCHEIN_GRUND_ARBEITSPREIS,
			interface{}(LIEFERSCHEIN_ARBEITS_LEISTUNGSPREIS).(fmt.Stringer).String():   LIEFERSCHEIN_ARBEITS_LEISTUNGSPREIS,
		}
	}
}

// MarshalJSON is generated so Handelsunstimmigkeitstyp satisfies json.Marshaler.
func (r Handelsunstimmigkeitstyp) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _HandelsunstimmigkeitstypValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Handelsunstimmigkeitstyp: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Handelsunstimmigkeitstyp satisfies json.Unmarshaler.
func (r *Handelsunstimmigkeitstyp) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Handelsunstimmigkeitstyp should be a string, got %s", data)
	}
	v, ok := _HandelsunstimmigkeitstypNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Handelsunstimmigkeitstyp %q", s)
	}
	*r = v
	return nil
}
