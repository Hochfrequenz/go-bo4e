// Code generated by jsonenums --type Unterbrechbarkeit; DO NOT EDIT.

package unterbrechbarkeit

import (
	"encoding/json"
	"fmt"
)

var (
	_UnterbrechbarkeitNameToValue = map[string]Unterbrechbarkeit{
		"UV":  UV,
		"NUV": NUV,
	}

	_UnterbrechbarkeitValueToName = map[Unterbrechbarkeit]string{
		UV:  "UV",
		NUV: "NUV",
	}
)

func init() {
	var v Unterbrechbarkeit
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_UnterbrechbarkeitNameToValue = map[string]Unterbrechbarkeit{
			interface{}(UV).(fmt.Stringer).String():  UV,
			interface{}(NUV).(fmt.Stringer).String(): NUV,
		}
	}
}

// MarshalJSON is generated so Unterbrechbarkeit satisfies json.Marshaler.
func (r Unterbrechbarkeit) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _UnterbrechbarkeitValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Unterbrechbarkeit: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Unterbrechbarkeit satisfies json.Unmarshaler.
func (r *Unterbrechbarkeit) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Unterbrechbarkeit should be a string, got %s", data)
	}
	v, ok := _UnterbrechbarkeitNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Unterbrechbarkeit %q", s)
	}
	*r = v
	return nil
}
