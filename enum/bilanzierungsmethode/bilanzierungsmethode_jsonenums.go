// Code generated by jsonenums --type Bilanzierungsmethode; DO NOT EDIT.

package bilanzierungsmethode

import (
	"encoding/json"
	"fmt"
)

var (
	_BilanzierungsmethodeNameToValue = map[string]Bilanzierungsmethode{
		"RLM":           RLM,
		"SLP":           SLP,
		"TLP_GEMEINSAM": TLP_GEMEINSAM,
		"TLP_GETRENNT":  TLP_GETRENNT,
		"PAUSCHAL":      PAUSCHAL,
	}

	_BilanzierungsmethodeValueToName = map[Bilanzierungsmethode]string{
		RLM:           "RLM",
		SLP:           "SLP",
		TLP_GEMEINSAM: "TLP_GEMEINSAM",
		TLP_GETRENNT:  "TLP_GETRENNT",
		PAUSCHAL:      "PAUSCHAL",
	}
)

func init() {
	var v Bilanzierungsmethode
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_BilanzierungsmethodeNameToValue = map[string]Bilanzierungsmethode{
			interface{}(RLM).(fmt.Stringer).String():           RLM,
			interface{}(SLP).(fmt.Stringer).String():           SLP,
			interface{}(TLP_GEMEINSAM).(fmt.Stringer).String(): TLP_GEMEINSAM,
			interface{}(TLP_GETRENNT).(fmt.Stringer).String():  TLP_GETRENNT,
			interface{}(PAUSCHAL).(fmt.Stringer).String():      PAUSCHAL,
		}
	}
}

// MarshalJSON is generated so Bilanzierungsmethode satisfies json.Marshaler.
func (r Bilanzierungsmethode) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _BilanzierungsmethodeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Bilanzierungsmethode: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Bilanzierungsmethode satisfies json.Unmarshaler.
func (r *Bilanzierungsmethode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Bilanzierungsmethode should be a string, got %s", data)
	}
	v, ok := _BilanzierungsmethodeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Bilanzierungsmethode %q", s)
	}
	*r = v
	return nil
}
