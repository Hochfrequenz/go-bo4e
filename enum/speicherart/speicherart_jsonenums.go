// Code generated by jsonenums --type Speicherart; DO NOT EDIT.

package speicherart

import (
	"encoding/json"
	"fmt"
)

var (
	_SpeicherartNameToValue = map[string]Speicherart{
		"WASSERSTOFFSPEICHER":  WASSERSTOFFSPEICHER,
		"PUMPSPEICHER":         PUMPSPEICHER,
		"BATTERIESPEICHER":     BATTERIESPEICHER,
		"SONSTIGE_SPEICHERART": SONSTIGE_SPEICHERART,
	}

	_SpeicherartValueToName = map[Speicherart]string{
		WASSERSTOFFSPEICHER:  "WASSERSTOFFSPEICHER",
		PUMPSPEICHER:         "PUMPSPEICHER",
		BATTERIESPEICHER:     "BATTERIESPEICHER",
		SONSTIGE_SPEICHERART: "SONSTIGE_SPEICHERART",
	}
)

func init() {
	var v Speicherart
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_SpeicherartNameToValue = map[string]Speicherart{
			interface{}(WASSERSTOFFSPEICHER).(fmt.Stringer).String():  WASSERSTOFFSPEICHER,
			interface{}(PUMPSPEICHER).(fmt.Stringer).String():         PUMPSPEICHER,
			interface{}(BATTERIESPEICHER).(fmt.Stringer).String():     BATTERIESPEICHER,
			interface{}(SONSTIGE_SPEICHERART).(fmt.Stringer).String(): SONSTIGE_SPEICHERART,
		}
	}
}

// MarshalJSON is generated so Speicherart satisfies json.Marshaler.
func (r Speicherart) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _SpeicherartValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Speicherart: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Speicherart satisfies json.Unmarshaler.
func (r *Speicherart) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Speicherart should be a string, got %s", data)
	}
	v, ok := _SpeicherartNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Speicherart %q", s)
	}
	*r = v
	return nil
}
