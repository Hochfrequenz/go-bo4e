// Code generated by jsonenums --type Messwertstatus; DO NOT EDIT.

package messwertstatus

import (
	"encoding/json"
	"fmt"
)

var (
	_MesswertstatusNameToValue = map[string]Messwertstatus{
		"ABGELESEN":            ABGELESEN,
		"ERSATZWERT":           ERSATZWERT,
		"VORSCHLAGSWERT":       VORSCHLAGSWERT,
		"PROGNOSEWERT":         PROGNOSEWERT,
		"VORLAUFIGERWERT":      VORLAUFIGERWERT,
		"ENERGIEMENGESUMMIERT": ENERGIEMENGESUMMIERT,
		"FEHLT":                FEHLT,
	}

	_MesswertstatusValueToName = map[Messwertstatus]string{
		ABGELESEN:            "ABGELESEN",
		ERSATZWERT:           "ERSATZWERT",
		VORSCHLAGSWERT:       "VORSCHLAGSWERT",
		PROGNOSEWERT:         "PROGNOSEWERT",
		VORLAUFIGERWERT:      "VORLAUFIGERWERT",
		ENERGIEMENGESUMMIERT: "ENERGIEMENGESUMMIERT",
		FEHLT:                "FEHLT",
	}
)

func init() {
	var v Messwertstatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_MesswertstatusNameToValue = map[string]Messwertstatus{
			interface{}(ABGELESEN).(fmt.Stringer).String():            ABGELESEN,
			interface{}(ERSATZWERT).(fmt.Stringer).String():           ERSATZWERT,
			interface{}(VORSCHLAGSWERT).(fmt.Stringer).String():       VORSCHLAGSWERT,
			interface{}(PROGNOSEWERT).(fmt.Stringer).String():         PROGNOSEWERT,
			interface{}(VORLAUFIGERWERT).(fmt.Stringer).String():      VORLAUFIGERWERT,
			interface{}(ENERGIEMENGESUMMIERT).(fmt.Stringer).String(): ENERGIEMENGESUMMIERT,
			interface{}(FEHLT).(fmt.Stringer).String():                FEHLT,
		}
	}
}

// MarshalJSON is generated so Messwertstatus satisfies json.Marshaler.
func (r Messwertstatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _MesswertstatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Messwertstatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Messwertstatus satisfies json.Unmarshaler.
func (r *Messwertstatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Messwertstatus should be a string, got %s", data)
	}
	v, ok := _MesswertstatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Messwertstatus %q", s)
	}
	*r = v
	return nil
}
