// Code generated by jsonenums --type Messwertstatus; DO NOT EDIT.

package messwertstatus

import (
	"encoding/json"
	"fmt"
)

var (
	_MesswertstatusNameToValue = map[string]Messwertstatus{
		"ABGELESEN":                ABGELESEN,
		"ERSATZWERT":               ERSATZWERT,
		"VOLAEUFIGERWERT":          VOLAEUFIGERWERT,
		"ANGABE_FUER_LIEFERSCHEIN": ANGABE_FUER_LIEFERSCHEIN,
		"VORSCHLAGSWERT":           VORSCHLAGSWERT,
		"NICHT_VERWENDBAR":         NICHT_VERWENDBAR,
		"PROGNOSEWERT":             PROGNOSEWERT,
		"ENERGIEMENGESUMMIERT":     ENERGIEMENGESUMMIERT,
		"FEHLT":                    FEHLT,
	}

	_MesswertstatusValueToName = map[Messwertstatus]string{
		ABGELESEN:                "ABGELESEN",
		ERSATZWERT:               "ERSATZWERT",
		VOLAEUFIGERWERT:          "VOLAEUFIGERWERT",
		ANGABE_FUER_LIEFERSCHEIN: "ANGABE_FUER_LIEFERSCHEIN",
		VORSCHLAGSWERT:           "VORSCHLAGSWERT",
		NICHT_VERWENDBAR:         "NICHT_VERWENDBAR",
		PROGNOSEWERT:             "PROGNOSEWERT",
		ENERGIEMENGESUMMIERT:     "ENERGIEMENGESUMMIERT",
		FEHLT:                    "FEHLT",
	}
)

func init() {
	var v Messwertstatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_MesswertstatusNameToValue = map[string]Messwertstatus{
			interface{}(ABGELESEN).(fmt.Stringer).String():                ABGELESEN,
			interface{}(ERSATZWERT).(fmt.Stringer).String():               ERSATZWERT,
			interface{}(VOLAEUFIGERWERT).(fmt.Stringer).String():          VOLAEUFIGERWERT,
			interface{}(ANGABE_FUER_LIEFERSCHEIN).(fmt.Stringer).String(): ANGABE_FUER_LIEFERSCHEIN,
			interface{}(VORSCHLAGSWERT).(fmt.Stringer).String():           VORSCHLAGSWERT,
			interface{}(NICHT_VERWENDBAR).(fmt.Stringer).String():         NICHT_VERWENDBAR,
			interface{}(PROGNOSEWERT).(fmt.Stringer).String():             PROGNOSEWERT,
			interface{}(ENERGIEMENGESUMMIERT).(fmt.Stringer).String():     ENERGIEMENGESUMMIERT,
			interface{}(FEHLT).(fmt.Stringer).String():                    FEHLT,
		}
	}
}

// MarshalJSON is generated so Messwertstatus satisfies json.Marshaler.
func (r Messwertstatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _MesswertstatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Messwertstatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Messwertstatus satisfies json.Unmarshaler.
func (r *Messwertstatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Messwertstatus should be a string, got %s", data)
	}
	v, ok := _MesswertstatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Messwertstatus %q", s)
	}
	*r = v
	return nil
}
