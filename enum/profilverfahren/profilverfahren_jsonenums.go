// Code generated by jsonenums --type Profilverfahren; DO NOT EDIT.

package profilverfahren

import (
	"encoding/json"
	"fmt"
)

var (
	_ProfilverfahrenNameToValue = map[string]Profilverfahren{
		"SYNTHETISCH": SYNTHETISCH,
		"ANALYTISCH":  ANALYTISCH,
	}

	_ProfilverfahrenValueToName = map[Profilverfahren]string{
		SYNTHETISCH: "SYNTHETISCH",
		ANALYTISCH:  "ANALYTISCH",
	}
)

func init() {
	var v Profilverfahren
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ProfilverfahrenNameToValue = map[string]Profilverfahren{
			interface{}(SYNTHETISCH).(fmt.Stringer).String(): SYNTHETISCH,
			interface{}(ANALYTISCH).(fmt.Stringer).String():  ANALYTISCH,
		}
	}
}

// MarshalJSON is generated so Profilverfahren satisfies json.Marshaler.
func (r Profilverfahren) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ProfilverfahrenValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Profilverfahren: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Profilverfahren satisfies json.Unmarshaler.
func (r *Profilverfahren) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Profilverfahren should be a string, got %s", data)
	}
	v, ok := _ProfilverfahrenNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Profilverfahren %q", s)
	}
	*r = v
	return nil
}
