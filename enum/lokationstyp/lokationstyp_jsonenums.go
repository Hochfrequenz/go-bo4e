// Code generated by jsonenums --type Lokationstyp; DO NOT EDIT.

package lokationstyp

import (
	"encoding/json"
	"fmt"
)

var (
	_LokationstypNameToValue = map[string]Lokationstyp{
		"MALO": MALO,
		"MELO": MELO,
	}

	_LokationstypValueToName = map[Lokationstyp]string{
		MALO: "MALO",
		MELO: "MELO",
	}
)

func init() {
	var v Lokationstyp
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_LokationstypNameToValue = map[string]Lokationstyp{
			interface{}(MALO).(fmt.Stringer).String(): MALO,
			interface{}(MELO).(fmt.Stringer).String(): MELO,
		}
	}
}

// MarshalJSON is generated so Lokationstyp satisfies json.Marshaler.
func (r Lokationstyp) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _LokationstypValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Lokationstyp: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Lokationstyp satisfies json.Unmarshaler.
func (r *Lokationstyp) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Lokationstyp should be a string, got %s", data)
	}
	v, ok := _LokationstypNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Lokationstyp %q", s)
	}
	*r = v
	return nil
}
