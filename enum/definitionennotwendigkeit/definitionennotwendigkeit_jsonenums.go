// Code generated by jsonenums --type DefinitionenNotwendigkeit; DO NOT EDIT.

package definitionennotwendigkeit

import (
	"encoding/json"
	"fmt"
)

var (
	_DefinitionenNotwendigkeitNameToValue = map[string]DefinitionenNotwendigkeit{
		"ZAEHLZEITDEFINITIONEN_WERDEN_VERWENDET":       ZAEHLZEITDEFINITIONEN_WERDEN_VERWENDET,
		"ZAEHLZEITDEFINITIONEN_WERDEN_NICHT_VERWENDET": ZAEHLZEITDEFINITIONEN_WERDEN_NICHT_VERWENDET,
		"DEFINITIONEN_WERDEN_VERWENDET":                DEFINITIONEN_WERDEN_VERWENDET,
		"DEFINITIONEN_WERDEN_NICHT_VERWENDET":          DEFINITIONEN_WERDEN_NICHT_VERWENDET,
	}

	_DefinitionenNotwendigkeitValueToName = map[DefinitionenNotwendigkeit]string{
		ZAEHLZEITDEFINITIONEN_WERDEN_VERWENDET:       "ZAEHLZEITDEFINITIONEN_WERDEN_VERWENDET",
		ZAEHLZEITDEFINITIONEN_WERDEN_NICHT_VERWENDET: "ZAEHLZEITDEFINITIONEN_WERDEN_NICHT_VERWENDET",
		DEFINITIONEN_WERDEN_VERWENDET:                "DEFINITIONEN_WERDEN_VERWENDET",
		DEFINITIONEN_WERDEN_NICHT_VERWENDET:          "DEFINITIONEN_WERDEN_NICHT_VERWENDET",
	}
)

func init() {
	var v DefinitionenNotwendigkeit
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_DefinitionenNotwendigkeitNameToValue = map[string]DefinitionenNotwendigkeit{
			interface{}(ZAEHLZEITDEFINITIONEN_WERDEN_VERWENDET).(fmt.Stringer).String():       ZAEHLZEITDEFINITIONEN_WERDEN_VERWENDET,
			interface{}(ZAEHLZEITDEFINITIONEN_WERDEN_NICHT_VERWENDET).(fmt.Stringer).String(): ZAEHLZEITDEFINITIONEN_WERDEN_NICHT_VERWENDET,
			interface{}(DEFINITIONEN_WERDEN_VERWENDET).(fmt.Stringer).String():                DEFINITIONEN_WERDEN_VERWENDET,
			interface{}(DEFINITIONEN_WERDEN_NICHT_VERWENDET).(fmt.Stringer).String():          DEFINITIONEN_WERDEN_NICHT_VERWENDET,
		}
	}
}

// MarshalJSON is generated so DefinitionenNotwendigkeit satisfies json.Marshaler.
func (r DefinitionenNotwendigkeit) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _DefinitionenNotwendigkeitValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid DefinitionenNotwendigkeit: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so DefinitionenNotwendigkeit satisfies json.Unmarshaler.
func (r *DefinitionenNotwendigkeit) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DefinitionenNotwendigkeit should be a string, got %s", data)
	}
	v, ok := _DefinitionenNotwendigkeitNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid DefinitionenNotwendigkeit %q", s)
	}
	*r = v
	return nil
}
