// Code generated by jsonenums --type NNRechnungsart; DO NOT EDIT.

package nnrechnungsart

import (
	"encoding/json"
	"fmt"
)

var (
	_NNRechnungsartNameToValue = map[string]NNRechnungsart{
		"HANDELSRECHNUNG":   HANDELSRECHNUNG,
		"SELBSTAUSGESTELLT": SELBSTAUSGESTELLT,
	}

	_NNRechnungsartValueToName = map[NNRechnungsart]string{
		HANDELSRECHNUNG:   "HANDELSRECHNUNG",
		SELBSTAUSGESTELLT: "SELBSTAUSGESTELLT",
	}
)

func init() {
	var v NNRechnungsart
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_NNRechnungsartNameToValue = map[string]NNRechnungsart{
			interface{}(HANDELSRECHNUNG).(fmt.Stringer).String():   HANDELSRECHNUNG,
			interface{}(SELBSTAUSGESTELLT).(fmt.Stringer).String(): SELBSTAUSGESTELLT,
		}
	}
}

// MarshalJSON is generated so NNRechnungsart satisfies json.Marshaler.
func (r NNRechnungsart) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _NNRechnungsartValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid NNRechnungsart: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so NNRechnungsart satisfies json.Unmarshaler.
func (r *NNRechnungsart) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NNRechnungsart should be a string, got %s", data)
	}
	v, ok := _NNRechnungsartNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid NNRechnungsart %q", s)
	}
	*r = v
	return nil
}
