// Code generated by jsonenums --type Kontaktart; DO NOT EDIT.

package kontaktart

import (
	"encoding/json"
	"fmt"
)

var (
	_KontaktartNameToValue = map[string]Kontaktart{
		"ANSCHREIBEN": ANSCHREIBEN,
		"TELEFONAT":   TELEFONAT,
		"FAX":         FAX,
		"EMAIL":       EMAIL,
		"SMS":         SMS,
	}

	_KontaktartValueToName = map[Kontaktart]string{
		ANSCHREIBEN: "ANSCHREIBEN",
		TELEFONAT:   "TELEFONAT",
		FAX:         "FAX",
		EMAIL:       "EMAIL",
		SMS:         "SMS",
	}
)

func init() {
	var v Kontaktart
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_KontaktartNameToValue = map[string]Kontaktart{
			interface{}(ANSCHREIBEN).(fmt.Stringer).String(): ANSCHREIBEN,
			interface{}(TELEFONAT).(fmt.Stringer).String():   TELEFONAT,
			interface{}(FAX).(fmt.Stringer).String():         FAX,
			interface{}(EMAIL).(fmt.Stringer).String():       EMAIL,
			interface{}(SMS).(fmt.Stringer).String():         SMS,
		}
	}
}

// MarshalJSON is generated so Kontaktart satisfies json.Marshaler.
func (r Kontaktart) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _KontaktartValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Kontaktart: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Kontaktart satisfies json.Unmarshaler.
func (r *Kontaktart) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Kontaktart should be a string, got %s", data)
	}
	v, ok := _KontaktartNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Kontaktart %q", s)
	}
	*r = v
	return nil
}
