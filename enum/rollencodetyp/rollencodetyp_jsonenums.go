// Code generated by jsonenums --type Rollencodetyp; DO NOT EDIT.

package rollencodetyp

import (
	"encoding/json"
	"fmt"
)

var (
	_RollencodetypNameToValue = map[string]Rollencodetyp{
		"BDEW": BDEW,
		"DVGW": DVGW,
		"GLN":  GLN,
	}

	_RollencodetypValueToName = map[Rollencodetyp]string{
		BDEW: "BDEW",
		DVGW: "DVGW",
		GLN:  "GLN",
	}
)

func init() {
	var v Rollencodetyp
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RollencodetypNameToValue = map[string]Rollencodetyp{
			interface{}(BDEW).(fmt.Stringer).String(): BDEW,
			interface{}(DVGW).(fmt.Stringer).String(): DVGW,
			interface{}(GLN).(fmt.Stringer).String():  GLN,
		}
	}
}

// MarshalJSON is generated so Rollencodetyp satisfies json.Marshaler.
func (r Rollencodetyp) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RollencodetypValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Rollencodetyp: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Rollencodetyp satisfies json.Unmarshaler.
func (r *Rollencodetyp) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Rollencodetyp should be a string, got %s", data)
	}
	v, ok := _RollencodetypNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Rollencodetyp %q", s)
	}
	*r = v
	return nil
}
