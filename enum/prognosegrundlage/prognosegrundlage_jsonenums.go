// Code generated by jsonenums --type Prognosegrundlage; DO NOT EDIT.

package prognosegrundlage

import (
	"encoding/json"
	"fmt"
)

var (
	_PrognosegrundlageNameToValue = map[string]Prognosegrundlage{
		"WERTE":   WERTE,
		"PROFILE": PROFILE,
	}

	_PrognosegrundlageValueToName = map[Prognosegrundlage]string{
		WERTE:   "WERTE",
		PROFILE: "PROFILE",
	}
)

func init() {
	var v Prognosegrundlage
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PrognosegrundlageNameToValue = map[string]Prognosegrundlage{
			interface{}(WERTE).(fmt.Stringer).String():   WERTE,
			interface{}(PROFILE).(fmt.Stringer).String(): PROFILE,
		}
	}
}

// MarshalJSON is generated so Prognosegrundlage satisfies json.Marshaler.
func (r Prognosegrundlage) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PrognosegrundlageValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Prognosegrundlage: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Prognosegrundlage satisfies json.Unmarshaler.
func (r *Prognosegrundlage) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Prognosegrundlage should be a string, got %s", data)
	}
	v, ok := _PrognosegrundlageNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Prognosegrundlage %q", s)
	}
	*r = v
	return nil
}
