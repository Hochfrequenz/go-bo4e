// Code generated by jsonenums --type TechnischeRessourceNutzung; DO NOT EDIT.

package technischeressourcenutzung

import (
	"encoding/json"
	"fmt"
)

var (
	_TechnischeRessourceNutzungNameToValue = map[string]TechnischeRessourceNutzung{
		"STROMVERBRAUCHSART": STROMVERBRAUCHSART,
		"STROMERZEUGUNGSART": STROMERZEUGUNGSART,
		"SPEICHER":           SPEICHER,
	}

	_TechnischeRessourceNutzungValueToName = map[TechnischeRessourceNutzung]string{
		STROMVERBRAUCHSART: "STROMVERBRAUCHSART",
		STROMERZEUGUNGSART: "STROMERZEUGUNGSART",
		SPEICHER:           "SPEICHER",
	}
)

func init() {
	var v TechnischeRessourceNutzung
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_TechnischeRessourceNutzungNameToValue = map[string]TechnischeRessourceNutzung{
			interface{}(STROMVERBRAUCHSART).(fmt.Stringer).String(): STROMVERBRAUCHSART,
			interface{}(STROMERZEUGUNGSART).(fmt.Stringer).String(): STROMERZEUGUNGSART,
			interface{}(SPEICHER).(fmt.Stringer).String():           SPEICHER,
		}
	}
}

// MarshalJSON is generated so TechnischeRessourceNutzung satisfies json.Marshaler.
func (r TechnischeRessourceNutzung) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _TechnischeRessourceNutzungValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid TechnischeRessourceNutzung: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so TechnischeRessourceNutzung satisfies json.Unmarshaler.
func (r *TechnischeRessourceNutzung) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TechnischeRessourceNutzung should be a string, got %s", data)
	}
	v, ok := _TechnischeRessourceNutzungNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid TechnischeRessourceNutzung %q", s)
	}
	*r = v
	return nil
}
