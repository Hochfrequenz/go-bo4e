// Code generated by jsonenums --type Zaehlertyp; DO NOT EDIT.

package zaehlertyp

import (
	"encoding/json"
	"fmt"
)

var (
	_ZaehlertypNameToValue = map[string]Zaehlertyp{
		"DREHSTROMZAEHLER":      DREHSTROMZAEHLER,
		"BALGENGASZAEHLER":      BALGENGASZAEHLER,
		"DREHKOLBENZAEHLER":     DREHKOLBENZAEHLER,
		"SMARTMETER":            SMARTMETER,
		"LEISTUNGSZAEHLER":      LEISTUNGSZAEHLER,
		"MAXIMUMZAEHLER":        MAXIMUMZAEHLER,
		"TURBINENRADGASZAEHLER": TURBINENRADGASZAEHLER,
		"ULTRASCHALLGASZAEHLER": ULTRASCHALLGASZAEHLER,
		"WECHSELSTROMZAEHLER":   WECHSELSTROMZAEHLER,
	}

	_ZaehlertypValueToName = map[Zaehlertyp]string{
		DREHSTROMZAEHLER:      "DREHSTROMZAEHLER",
		BALGENGASZAEHLER:      "BALGENGASZAEHLER",
		DREHKOLBENZAEHLER:     "DREHKOLBENZAEHLER",
		SMARTMETER:            "SMARTMETER",
		LEISTUNGSZAEHLER:      "LEISTUNGSZAEHLER",
		MAXIMUMZAEHLER:        "MAXIMUMZAEHLER",
		TURBINENRADGASZAEHLER: "TURBINENRADGASZAEHLER",
		ULTRASCHALLGASZAEHLER: "ULTRASCHALLGASZAEHLER",
		WECHSELSTROMZAEHLER:   "WECHSELSTROMZAEHLER",
	}
)

func init() {
	var v Zaehlertyp
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ZaehlertypNameToValue = map[string]Zaehlertyp{
			interface{}(DREHSTROMZAEHLER).(fmt.Stringer).String():      DREHSTROMZAEHLER,
			interface{}(BALGENGASZAEHLER).(fmt.Stringer).String():      BALGENGASZAEHLER,
			interface{}(DREHKOLBENZAEHLER).(fmt.Stringer).String():     DREHKOLBENZAEHLER,
			interface{}(SMARTMETER).(fmt.Stringer).String():            SMARTMETER,
			interface{}(LEISTUNGSZAEHLER).(fmt.Stringer).String():      LEISTUNGSZAEHLER,
			interface{}(MAXIMUMZAEHLER).(fmt.Stringer).String():        MAXIMUMZAEHLER,
			interface{}(TURBINENRADGASZAEHLER).(fmt.Stringer).String(): TURBINENRADGASZAEHLER,
			interface{}(ULTRASCHALLGASZAEHLER).(fmt.Stringer).String(): ULTRASCHALLGASZAEHLER,
			interface{}(WECHSELSTROMZAEHLER).(fmt.Stringer).String():   WECHSELSTROMZAEHLER,
		}
	}
}

// MarshalJSON is generated so Zaehlertyp satisfies json.Marshaler.
func (r Zaehlertyp) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ZaehlertypValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Zaehlertyp: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Zaehlertyp satisfies json.Unmarshaler.
func (r *Zaehlertyp) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Zaehlertyp should be a string, got %s", data)
	}
	v, ok := _ZaehlertypNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Zaehlertyp %q", s)
	}
	*r = v
	return nil
}
