// Code generated by jsonenums --type Zaehlertyp; DO NOT EDIT.

package zaehlertyp

import (
	"encoding/json"
	"fmt"
)

var (
	_ZaehlertypNameToValue = map[string]Zaehlertyp{
		"Drehstromzaehler":      Drehstromzaehler,
		"Balgengaszaehler":      Balgengaszaehler,
		"Drehkolbenzaehler":     Drehkolbenzaehler,
		"SmartMeter":            SmartMeter,
		"Leistungszaehler":      Leistungszaehler,
		"Maximumgaehler":        Maximumgaehler,
		"Turbinenradgaszaehler": Turbinenradgaszaehler,
		"Ultraschallgaszaehler": Ultraschallgaszaehler,
		"Wechselstromzaehler":   Wechselstromzaehler,
	}

	_ZaehlertypValueToName = map[Zaehlertyp]string{
		Drehstromzaehler:      "Drehstromzaehler",
		Balgengaszaehler:      "Balgengaszaehler",
		Drehkolbenzaehler:     "Drehkolbenzaehler",
		SmartMeter:            "SmartMeter",
		Leistungszaehler:      "Leistungszaehler",
		Maximumgaehler:        "Maximumgaehler",
		Turbinenradgaszaehler: "Turbinenradgaszaehler",
		Ultraschallgaszaehler: "Ultraschallgaszaehler",
		Wechselstromzaehler:   "Wechselstromzaehler",
	}
)

func init() {
	var v Zaehlertyp
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ZaehlertypNameToValue = map[string]Zaehlertyp{
			interface{}(Drehstromzaehler).(fmt.Stringer).String():      Drehstromzaehler,
			interface{}(Balgengaszaehler).(fmt.Stringer).String():      Balgengaszaehler,
			interface{}(Drehkolbenzaehler).(fmt.Stringer).String():     Drehkolbenzaehler,
			interface{}(SmartMeter).(fmt.Stringer).String():            SmartMeter,
			interface{}(Leistungszaehler).(fmt.Stringer).String():      Leistungszaehler,
			interface{}(Maximumgaehler).(fmt.Stringer).String():        Maximumgaehler,
			interface{}(Turbinenradgaszaehler).(fmt.Stringer).String(): Turbinenradgaszaehler,
			interface{}(Ultraschallgaszaehler).(fmt.Stringer).String(): Ultraschallgaszaehler,
			interface{}(Wechselstromzaehler).(fmt.Stringer).String():   Wechselstromzaehler,
		}
	}
}

// MarshalJSON is generated so Zaehlertyp satisfies json.Marshaler.
func (r Zaehlertyp) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ZaehlertypValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Zaehlertyp: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Zaehlertyp satisfies json.Unmarshaler.
func (r *Zaehlertyp) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Zaehlertyp should be a string, got %s", data)
	}
	v, ok := _ZaehlertypNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Zaehlertyp %q", s)
	}
	*r = v
	return nil
}
