// Code generated by jsonenums --type Reklamationsgrund; DO NOT EDIT.

package reklamationsgrund

import (
	"encoding/json"
	"fmt"
)

var (
	_ReklamationsgrundNameToValue = map[string]Reklamationsgrund{
		"FEHLT":      FEHLT,
		"ZU_NIEDRIG": ZU_NIEDRIG,
		"ZU_HOCH":    ZU_HOCH,
	}

	_ReklamationsgrundValueToName = map[Reklamationsgrund]string{
		FEHLT:      "FEHLT",
		ZU_NIEDRIG: "ZU_NIEDRIG",
		ZU_HOCH:    "ZU_HOCH",
	}
)

func init() {
	var v Reklamationsgrund
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ReklamationsgrundNameToValue = map[string]Reklamationsgrund{
			interface{}(FEHLT).(fmt.Stringer).String():      FEHLT,
			interface{}(ZU_NIEDRIG).(fmt.Stringer).String(): ZU_NIEDRIG,
			interface{}(ZU_HOCH).(fmt.Stringer).String():    ZU_HOCH,
		}
	}
}

// MarshalJSON is generated so Reklamationsgrund satisfies json.Marshaler.
func (r Reklamationsgrund) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ReklamationsgrundValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Reklamationsgrund: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Reklamationsgrund satisfies json.Unmarshaler.
func (r *Reklamationsgrund) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Reklamationsgrund should be a string, got %s", data)
	}
	v, ok := _ReklamationsgrundNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Reklamationsgrund %q", s)
	}
	*r = v
	return nil
}
