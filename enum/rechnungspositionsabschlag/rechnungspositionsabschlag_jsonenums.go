// Code generated by jsonenums --type RechnungspositionsAbschlag; DO NOT EDIT.

package rechnungspositionsabschlag

import (
	"encoding/json"
	"fmt"
)

var (
	_RechnungspositionsAbschlagNameToValue = map[string]RechnungspositionsAbschlag{
		"GEMEINDERABATT":     GEMEINDERABATT,
		"ABSCHLAG_ANPASSUNG": ABSCHLAG_ANPASSUNG,
	}

	_RechnungspositionsAbschlagValueToName = map[RechnungspositionsAbschlag]string{
		GEMEINDERABATT:     "GEMEINDERABATT",
		ABSCHLAG_ANPASSUNG: "ABSCHLAG_ANPASSUNG",
	}
)

func init() {
	var v RechnungspositionsAbschlag
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RechnungspositionsAbschlagNameToValue = map[string]RechnungspositionsAbschlag{
			interface{}(GEMEINDERABATT).(fmt.Stringer).String():     GEMEINDERABATT,
			interface{}(ABSCHLAG_ANPASSUNG).(fmt.Stringer).String(): ABSCHLAG_ANPASSUNG,
		}
	}
}

// MarshalJSON is generated so RechnungspositionsAbschlag satisfies json.Marshaler.
func (r RechnungspositionsAbschlag) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RechnungspositionsAbschlagValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid RechnungspositionsAbschlag: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so RechnungspositionsAbschlag satisfies json.Unmarshaler.
func (r *RechnungspositionsAbschlag) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RechnungspositionsAbschlag should be a string, got %s", data)
	}
	v, ok := _RechnungspositionsAbschlagNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid RechnungspositionsAbschlag %q", s)
	}
	*r = v
	return nil
}
