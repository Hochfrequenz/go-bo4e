// Code generated by jsonenums --type Fallgruppenzuordnung; DO NOT EDIT.

package fallgruppenzuordnung

import (
	"encoding/json"
	"fmt"
)

var (
	_FallgruppenzuordnungNameToValue = map[string]Fallgruppenzuordnung{
		"GABI_RLMmT":  GABI_RLMmT,
		"GABI_RLMoT":  GABI_RLMoT,
		"GABI_RLMNEV": GABI_RLMNEV,
	}

	_FallgruppenzuordnungValueToName = map[Fallgruppenzuordnung]string{
		GABI_RLMmT:  "GABI_RLMmT",
		GABI_RLMoT:  "GABI_RLMoT",
		GABI_RLMNEV: "GABI_RLMNEV",
	}
)

func init() {
	var v Fallgruppenzuordnung
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_FallgruppenzuordnungNameToValue = map[string]Fallgruppenzuordnung{
			interface{}(GABI_RLMmT).(fmt.Stringer).String():  GABI_RLMmT,
			interface{}(GABI_RLMoT).(fmt.Stringer).String():  GABI_RLMoT,
			interface{}(GABI_RLMNEV).(fmt.Stringer).String(): GABI_RLMNEV,
		}
	}
}

// MarshalJSON is generated so Fallgruppenzuordnung satisfies json.Marshaler.
func (r Fallgruppenzuordnung) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _FallgruppenzuordnungValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Fallgruppenzuordnung: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Fallgruppenzuordnung satisfies json.Unmarshaler.
func (r *Fallgruppenzuordnung) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Fallgruppenzuordnung should be a string, got %s", data)
	}
	v, ok := _FallgruppenzuordnungNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Fallgruppenzuordnung %q", s)
	}
	*r = v
	return nil
}
