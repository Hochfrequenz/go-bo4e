// Code generated by jsonenums --type EMobilitaetsart; DO NOT EDIT.

package emobilitaetsart

import (
	"encoding/json"
	"fmt"
)

var (
	_EMobilitaetsartNameToValue = map[string]EMobilitaetsart{
		"WALLBOX":                 WALLBOX,
		"E_MOBILITAETSLADESAEULE": E_MOBILITAETSLADESAEULE,
		"LADEPARK":                LADEPARK,
	}

	_EMobilitaetsartValueToName = map[EMobilitaetsart]string{
		WALLBOX:                 "WALLBOX",
		E_MOBILITAETSLADESAEULE: "E_MOBILITAETSLADESAEULE",
		LADEPARK:                "LADEPARK",
	}
)

func init() {
	var v EMobilitaetsart
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_EMobilitaetsartNameToValue = map[string]EMobilitaetsart{
			interface{}(WALLBOX).(fmt.Stringer).String():                 WALLBOX,
			interface{}(E_MOBILITAETSLADESAEULE).(fmt.Stringer).String(): E_MOBILITAETSLADESAEULE,
			interface{}(LADEPARK).(fmt.Stringer).String():                LADEPARK,
		}
	}
}

// MarshalJSON is generated so EMobilitaetsart satisfies json.Marshaler.
func (r EMobilitaetsart) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _EMobilitaetsartValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid EMobilitaetsart: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so EMobilitaetsart satisfies json.Unmarshaler.
func (r *EMobilitaetsart) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EMobilitaetsart should be a string, got %s", data)
	}
	v, ok := _EMobilitaetsartNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid EMobilitaetsart %q", s)
	}
	*r = v
	return nil
}
