// Code generated by jsonenums --type Rechnungstyp; DO NOT EDIT.

package rechnungstyp

import (
	"encoding/json"
	"fmt"
)

var (
	_RechnungstypNameToValue = map[string]Rechnungstyp{
		"Endkundenrechnung":              Endkundenrechnung,
		"Netznutzungsrechnung":           Netznutzungsrechnung,
		"Mehrmindermengenrechnung":       Mehrmindermengenrechnung,
		"Messstellenbetriebsrechnung":    Messstellenbetriebsrechnung,
		"Beschaffungsrechnung":           Beschaffungsrechnung,
		"Ausgleichsenergierechnung":      Ausgleichsenergierechnung,
		"Abschlagsrechnung":              Abschlagsrechnung,
		"WiMRechnung":                    WiMRechnung,
		"SelbstAusgestellteRechnungMeMi": SelbstAusgestellteRechnungMeMi,
	}

	_RechnungstypValueToName = map[Rechnungstyp]string{
		Endkundenrechnung:              "Endkundenrechnung",
		Netznutzungsrechnung:           "Netznutzungsrechnung",
		Mehrmindermengenrechnung:       "Mehrmindermengenrechnung",
		Messstellenbetriebsrechnung:    "Messstellenbetriebsrechnung",
		Beschaffungsrechnung:           "Beschaffungsrechnung",
		Ausgleichsenergierechnung:      "Ausgleichsenergierechnung",
		Abschlagsrechnung:              "Abschlagsrechnung",
		WiMRechnung:                    "WiMRechnung",
		SelbstAusgestellteRechnungMeMi: "SelbstAusgestellteRechnungMeMi",
	}
)

func init() {
	var v Rechnungstyp
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RechnungstypNameToValue = map[string]Rechnungstyp{
			interface{}(Endkundenrechnung).(fmt.Stringer).String():              Endkundenrechnung,
			interface{}(Netznutzungsrechnung).(fmt.Stringer).String():           Netznutzungsrechnung,
			interface{}(Mehrmindermengenrechnung).(fmt.Stringer).String():       Mehrmindermengenrechnung,
			interface{}(Messstellenbetriebsrechnung).(fmt.Stringer).String():    Messstellenbetriebsrechnung,
			interface{}(Beschaffungsrechnung).(fmt.Stringer).String():           Beschaffungsrechnung,
			interface{}(Ausgleichsenergierechnung).(fmt.Stringer).String():      Ausgleichsenergierechnung,
			interface{}(Abschlagsrechnung).(fmt.Stringer).String():              Abschlagsrechnung,
			interface{}(WiMRechnung).(fmt.Stringer).String():                    WiMRechnung,
			interface{}(SelbstAusgestellteRechnungMeMi).(fmt.Stringer).String(): SelbstAusgestellteRechnungMeMi,
		}
	}
}

// MarshalJSON is generated so Rechnungstyp satisfies json.Marshaler.
func (r Rechnungstyp) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RechnungstypValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Rechnungstyp: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Rechnungstyp satisfies json.Unmarshaler.
func (r *Rechnungstyp) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Rechnungstyp should be a string, got %s", data)
	}
	v, ok := _RechnungstypNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Rechnungstyp %q", s)
	}
	*r = v
	return nil
}
