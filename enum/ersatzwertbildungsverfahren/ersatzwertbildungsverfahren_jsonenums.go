// Code generated by jsonenums --type Ersatzwertbildungsverfahren; DO NOT EDIT.

package ersatzwertbildungsverfahren

import (
	"encoding/json"
	"fmt"
)

var (
	_ErsatzwertbildungsverfahrenNameToValue = map[string]Ersatzwertbildungsverfahren{
		"VERGLEICHSMESSUNG_GEEICHT":                       VERGLEICHSMESSUNG_GEEICHT,
		"VERGLEICHSMESSUNG_NICHT_GEEICHT":                 VERGLEICHSMESSUNG_NICHT_GEEICHT,
		"MESSWERTNACHBILDUNG_AUS_GEEICHTE_NWERTEN":        MESSWERTNACHBILDUNG_AUS_GEEICHTE_NWERTEN,
		"MESSWERTNACHBILDUNG_AUS_NICHT_GEEICHTEN_WERTEN":  MESSWERTNACHBILDUNG_AUS_NICHT_GEEICHTEN_WERTEN,
		"INTERPOLATION":                                   INTERPOLATION,
		"HALTEWERT":                                       HALTEWERT,
		"BILANZIERUNGNETZABSCHNITT":                       BILANZIERUNGNETZABSCHNITT,
		"HISTORISCHE_MESSWERTE":                           HISTORISCHE_MESSWERTE,
		"AUFTEILUNG":                                      AUFTEILUNG,
		"VERWENDUNG_VON_WERTEN_DES_STOERMENGENZAEHLWERKS": VERWENDUNG_VON_WERTEN_DES_STOERMENGENZAEHLWERKS,
		"UMGANGS_UND_KORREKTURMENGEN":                     UMGANGS_UND_KORREKTURMENGEN,
		"STATISCHE_METHODE":                               STATISCHE_METHODE,
	}

	_ErsatzwertbildungsverfahrenValueToName = map[Ersatzwertbildungsverfahren]string{
		VERGLEICHSMESSUNG_GEEICHT:                      "VERGLEICHSMESSUNG_GEEICHT",
		VERGLEICHSMESSUNG_NICHT_GEEICHT:                "VERGLEICHSMESSUNG_NICHT_GEEICHT",
		MESSWERTNACHBILDUNG_AUS_GEEICHTE_NWERTEN:       "MESSWERTNACHBILDUNG_AUS_GEEICHTE_NWERTEN",
		MESSWERTNACHBILDUNG_AUS_NICHT_GEEICHTEN_WERTEN: "MESSWERTNACHBILDUNG_AUS_NICHT_GEEICHTEN_WERTEN",
		INTERPOLATION:             "INTERPOLATION",
		HALTEWERT:                 "HALTEWERT",
		BILANZIERUNGNETZABSCHNITT: "BILANZIERUNGNETZABSCHNITT",
		HISTORISCHE_MESSWERTE:     "HISTORISCHE_MESSWERTE",
		AUFTEILUNG:                "AUFTEILUNG",
		VERWENDUNG_VON_WERTEN_DES_STOERMENGENZAEHLWERKS: "VERWENDUNG_VON_WERTEN_DES_STOERMENGENZAEHLWERKS",
		UMGANGS_UND_KORREKTURMENGEN:                     "UMGANGS_UND_KORREKTURMENGEN",
		STATISCHE_METHODE:                               "STATISCHE_METHODE",
	}
)

func init() {
	var v Ersatzwertbildungsverfahren
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ErsatzwertbildungsverfahrenNameToValue = map[string]Ersatzwertbildungsverfahren{
			interface{}(VERGLEICHSMESSUNG_GEEICHT).(fmt.Stringer).String():                       VERGLEICHSMESSUNG_GEEICHT,
			interface{}(VERGLEICHSMESSUNG_NICHT_GEEICHT).(fmt.Stringer).String():                 VERGLEICHSMESSUNG_NICHT_GEEICHT,
			interface{}(MESSWERTNACHBILDUNG_AUS_GEEICHTE_NWERTEN).(fmt.Stringer).String():        MESSWERTNACHBILDUNG_AUS_GEEICHTE_NWERTEN,
			interface{}(MESSWERTNACHBILDUNG_AUS_NICHT_GEEICHTEN_WERTEN).(fmt.Stringer).String():  MESSWERTNACHBILDUNG_AUS_NICHT_GEEICHTEN_WERTEN,
			interface{}(INTERPOLATION).(fmt.Stringer).String():                                   INTERPOLATION,
			interface{}(HALTEWERT).(fmt.Stringer).String():                                       HALTEWERT,
			interface{}(BILANZIERUNGNETZABSCHNITT).(fmt.Stringer).String():                       BILANZIERUNGNETZABSCHNITT,
			interface{}(HISTORISCHE_MESSWERTE).(fmt.Stringer).String():                           HISTORISCHE_MESSWERTE,
			interface{}(AUFTEILUNG).(fmt.Stringer).String():                                      AUFTEILUNG,
			interface{}(VERWENDUNG_VON_WERTEN_DES_STOERMENGENZAEHLWERKS).(fmt.Stringer).String(): VERWENDUNG_VON_WERTEN_DES_STOERMENGENZAEHLWERKS,
			interface{}(UMGANGS_UND_KORREKTURMENGEN).(fmt.Stringer).String():                     UMGANGS_UND_KORREKTURMENGEN,
			interface{}(STATISCHE_METHODE).(fmt.Stringer).String():                               STATISCHE_METHODE,
		}
	}
}

// MarshalJSON is generated so Ersatzwertbildungsverfahren satisfies json.Marshaler.
func (r Ersatzwertbildungsverfahren) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ErsatzwertbildungsverfahrenValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Ersatzwertbildungsverfahren: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Ersatzwertbildungsverfahren satisfies json.Unmarshaler.
func (r *Ersatzwertbildungsverfahren) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Ersatzwertbildungsverfahren should be a string, got %s", data)
	}
	v, ok := _ErsatzwertbildungsverfahrenNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Ersatzwertbildungsverfahren %q", s)
	}
	*r = v
	return nil
}
