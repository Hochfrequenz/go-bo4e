// Code generated by jsonenums --type Sperrstatus; DO NOT EDIT.

package sperrstatus

import (
	"encoding/json"
	"fmt"
)

var (
	_SperrstatusNameToValue = map[string]Sperrstatus{
		"ENTSPERRT": ENTSPERRT,
		"GESPERRT":  GESPERRT,
	}

	_SperrstatusValueToName = map[Sperrstatus]string{
		ENTSPERRT: "ENTSPERRT",
		GESPERRT:  "GESPERRT",
	}
)

func init() {
	var v Sperrstatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_SperrstatusNameToValue = map[string]Sperrstatus{
			interface{}(ENTSPERRT).(fmt.Stringer).String(): ENTSPERRT,
			interface{}(GESPERRT).(fmt.Stringer).String():  GESPERRT,
		}
	}
}

// MarshalJSON is generated so Sperrstatus satisfies json.Marshaler.
func (r Sperrstatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _SperrstatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Sperrstatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Sperrstatus satisfies json.Unmarshaler.
func (r *Sperrstatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Sperrstatus should be a string, got %s", data)
	}
	v, ok := _SperrstatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Sperrstatus %q", s)
	}
	*r = v
	return nil
}
