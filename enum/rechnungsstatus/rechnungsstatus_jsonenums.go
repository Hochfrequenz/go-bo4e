// Code generated by jsonenums --type Rechnungsstatus; DO NOT EDIT.

package rechnungsstatus

import (
	"encoding/json"
	"fmt"
)

var (
	_RechnungsstatusNameToValue = map[string]Rechnungsstatus{
		"UNGEPRUEFT":          UNGEPRUEFT,
		"GEPRUEFT_OK":         GEPRUEFT_OK,
		"GEPRUEFT_FEHLERHAFT": GEPRUEFT_FEHLERHAFT,
		"GEBUCHT":             GEBUCHT,
		"BEZAHLT":             BEZAHLT,
	}

	_RechnungsstatusValueToName = map[Rechnungsstatus]string{
		UNGEPRUEFT:          "UNGEPRUEFT",
		GEPRUEFT_OK:         "GEPRUEFT_OK",
		GEPRUEFT_FEHLERHAFT: "GEPRUEFT_FEHLERHAFT",
		GEBUCHT:             "GEBUCHT",
		BEZAHLT:             "BEZAHLT",
	}
)

func init() {
	var v Rechnungsstatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RechnungsstatusNameToValue = map[string]Rechnungsstatus{
			interface{}(UNGEPRUEFT).(fmt.Stringer).String():          UNGEPRUEFT,
			interface{}(GEPRUEFT_OK).(fmt.Stringer).String():         GEPRUEFT_OK,
			interface{}(GEPRUEFT_FEHLERHAFT).(fmt.Stringer).String(): GEPRUEFT_FEHLERHAFT,
			interface{}(GEBUCHT).(fmt.Stringer).String():             GEBUCHT,
			interface{}(BEZAHLT).(fmt.Stringer).String():             BEZAHLT,
		}
	}
}

// MarshalJSON is generated so Rechnungsstatus satisfies json.Marshaler.
func (r Rechnungsstatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RechnungsstatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Rechnungsstatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Rechnungsstatus satisfies json.Unmarshaler.
func (r *Rechnungsstatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Rechnungsstatus should be a string, got %s", data)
	}
	v, ok := _RechnungsstatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Rechnungsstatus %q", s)
	}
	*r = v
	return nil
}
