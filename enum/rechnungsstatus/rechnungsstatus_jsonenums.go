// Code generated by jsonenums --type Rechnungsstatus; DO NOT EDIT.

package rechnungsstatus

import (
	"encoding/json"
	"fmt"
)

var (
	_RechnungsstatusNameToValue = map[string]Rechnungsstatus{
		"Ungeprueft":         Ungeprueft,
		"GeprueftOk":         GeprueftOk,
		"GeprueftFehlerhaft": GeprueftFehlerhaft,
		"Gebucht":            Gebucht,
		"Bezahlt":            Bezahlt,
	}

	_RechnungsstatusValueToName = map[Rechnungsstatus]string{
		Ungeprueft:         "Ungeprueft",
		GeprueftOk:         "GeprueftOk",
		GeprueftFehlerhaft: "GeprueftFehlerhaft",
		Gebucht:            "Gebucht",
		Bezahlt:            "Bezahlt",
	}
)

func init() {
	var v Rechnungsstatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RechnungsstatusNameToValue = map[string]Rechnungsstatus{
			interface{}(Ungeprueft).(fmt.Stringer).String():         Ungeprueft,
			interface{}(GeprueftOk).(fmt.Stringer).String():         GeprueftOk,
			interface{}(GeprueftFehlerhaft).(fmt.Stringer).String(): GeprueftFehlerhaft,
			interface{}(Gebucht).(fmt.Stringer).String():            Gebucht,
			interface{}(Bezahlt).(fmt.Stringer).String():            Bezahlt,
		}
	}
}

// MarshalJSON is generated so Rechnungsstatus satisfies json.Marshaler.
func (r Rechnungsstatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RechnungsstatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Rechnungsstatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Rechnungsstatus satisfies json.Unmarshaler.
func (r *Rechnungsstatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Rechnungsstatus should be a string, got %s", data)
	}
	v, ok := _RechnungsstatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Rechnungsstatus %q", s)
	}
	*r = v
	return nil
}
