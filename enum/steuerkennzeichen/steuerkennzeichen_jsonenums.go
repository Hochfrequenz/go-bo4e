// Code generated by jsonenums --type Steuerkennzeichen; DO NOT EDIT.

package steuerkennzeichen

import (
	"encoding/json"
	"fmt"
)

var (
	_SteuerkennzeichenNameToValue = map[string]Steuerkennzeichen{
		"UST_0":  UST_0,
		"UST_16": UST_16,
		"UST_19": UST_19,
		"UST_7":  UST_7,
		"VST_0":  VST_0,
		"VST_19": VST_19,
		"VST_7":  VST_7,
		"RCV":    RCV,
	}

	_SteuerkennzeichenValueToName = map[Steuerkennzeichen]string{
		UST_0:  "UST_0",
		UST_16: "UST_16",
		UST_19: "UST_19",
		UST_7:  "UST_7",
		VST_0:  "VST_0",
		VST_19: "VST_19",
		VST_7:  "VST_7",
		RCV:    "RCV",
	}
)

func init() {
	var v Steuerkennzeichen
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_SteuerkennzeichenNameToValue = map[string]Steuerkennzeichen{
			interface{}(UST_0).(fmt.Stringer).String():  UST_0,
			interface{}(UST_16).(fmt.Stringer).String(): UST_16,
			interface{}(UST_19).(fmt.Stringer).String(): UST_19,
			interface{}(UST_7).(fmt.Stringer).String():  UST_7,
			interface{}(VST_0).(fmt.Stringer).String():  VST_0,
			interface{}(VST_19).(fmt.Stringer).String(): VST_19,
			interface{}(VST_7).(fmt.Stringer).String():  VST_7,
			interface{}(RCV).(fmt.Stringer).String():    RCV,
		}
	}
}

// MarshalJSON is generated so Steuerkennzeichen satisfies json.Marshaler.
func (r Steuerkennzeichen) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _SteuerkennzeichenValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Steuerkennzeichen: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Steuerkennzeichen satisfies json.Unmarshaler.
func (r *Steuerkennzeichen) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Steuerkennzeichen should be a string, got %s", data)
	}
	v, ok := _SteuerkennzeichenNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Steuerkennzeichen %q", s)
	}
	*r = v
	return nil
}
