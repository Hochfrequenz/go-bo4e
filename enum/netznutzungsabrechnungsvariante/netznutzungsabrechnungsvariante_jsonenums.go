// Code generated by jsonenums --type Netznutzungsabrechnungsvariante; DO NOT EDIT.

package netznutzungsabrechnungsvariante

import (
	"encoding/json"
	"fmt"
)

var (
	_NetznutzungsabrechnungsvarianteNameToValue = map[string]Netznutzungsabrechnungsvariante{
		"ARBEITSPREIS_GRUNDPREIS":     ARBEITSPREIS_GRUNDPREIS,
		"ARBEITSPREIS_LEISTUNGSPREIS": ARBEITSPREIS_LEISTUNGSPREIS,
	}

	_NetznutzungsabrechnungsvarianteValueToName = map[Netznutzungsabrechnungsvariante]string{
		ARBEITSPREIS_GRUNDPREIS:     "ARBEITSPREIS_GRUNDPREIS",
		ARBEITSPREIS_LEISTUNGSPREIS: "ARBEITSPREIS_LEISTUNGSPREIS",
	}
)

func init() {
	var v Netznutzungsabrechnungsvariante
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_NetznutzungsabrechnungsvarianteNameToValue = map[string]Netznutzungsabrechnungsvariante{
			interface{}(ARBEITSPREIS_GRUNDPREIS).(fmt.Stringer).String():     ARBEITSPREIS_GRUNDPREIS,
			interface{}(ARBEITSPREIS_LEISTUNGSPREIS).(fmt.Stringer).String(): ARBEITSPREIS_LEISTUNGSPREIS,
		}
	}
}

// MarshalJSON is generated so Netznutzungsabrechnungsvariante satisfies json.Marshaler.
func (r Netznutzungsabrechnungsvariante) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _NetznutzungsabrechnungsvarianteValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Netznutzungsabrechnungsvariante: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Netznutzungsabrechnungsvariante satisfies json.Unmarshaler.
func (r *Netznutzungsabrechnungsvariante) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Netznutzungsabrechnungsvariante should be a string, got %s", data)
	}
	v, ok := _NetznutzungsabrechnungsvarianteNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Netznutzungsabrechnungsvariante %q", s)
	}
	*r = v
	return nil
}
