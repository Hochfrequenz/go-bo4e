// Code generated by jsonenums --type Sonderrechnungsart; DO NOT EDIT.

package sonderrechnungsart

import (
	"encoding/json"
	"fmt"
)

var (
	_SonderrechnungsartNameToValue = map[string]Sonderrechnungsart{
		"KONZESSIONSABGABE_TESTAT":      KONZESSIONSABGABE_TESTAT,
		"INDIVIDUELL_ATYPISCH":          INDIVIDUELL_ATYPISCH,
		"INDIVIDUELL_SINGULAER":         INDIVIDUELL_SINGULAER,
		"KWKG_UMLAGE":                   KWKG_UMLAGE,
		"OFFSHORE_UMLAGE":               OFFSHORE_UMLAGE,
		"P19_STROM_NEV_UMLAGE":          P19_STROM_NEV_UMLAGE,
		"P18_ABLAV":                     P18_ABLAV,
		"KONZESSIONSABGABE_WECHSEL_RLM": KONZESSIONSABGABE_WECHSEL_RLM,
	}

	_SonderrechnungsartValueToName = map[Sonderrechnungsart]string{
		KONZESSIONSABGABE_TESTAT:      "KONZESSIONSABGABE_TESTAT",
		INDIVIDUELL_ATYPISCH:          "INDIVIDUELL_ATYPISCH",
		INDIVIDUELL_SINGULAER:         "INDIVIDUELL_SINGULAER",
		KWKG_UMLAGE:                   "KWKG_UMLAGE",
		OFFSHORE_UMLAGE:               "OFFSHORE_UMLAGE",
		P19_STROM_NEV_UMLAGE:          "P19_STROM_NEV_UMLAGE",
		P18_ABLAV:                     "P18_ABLAV",
		KONZESSIONSABGABE_WECHSEL_RLM: "KONZESSIONSABGABE_WECHSEL_RLM",
	}
)

func init() {
	var v Sonderrechnungsart
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_SonderrechnungsartNameToValue = map[string]Sonderrechnungsart{
			interface{}(KONZESSIONSABGABE_TESTAT).(fmt.Stringer).String():      KONZESSIONSABGABE_TESTAT,
			interface{}(INDIVIDUELL_ATYPISCH).(fmt.Stringer).String():          INDIVIDUELL_ATYPISCH,
			interface{}(INDIVIDUELL_SINGULAER).(fmt.Stringer).String():         INDIVIDUELL_SINGULAER,
			interface{}(KWKG_UMLAGE).(fmt.Stringer).String():                   KWKG_UMLAGE,
			interface{}(OFFSHORE_UMLAGE).(fmt.Stringer).String():               OFFSHORE_UMLAGE,
			interface{}(P19_STROM_NEV_UMLAGE).(fmt.Stringer).String():          P19_STROM_NEV_UMLAGE,
			interface{}(P18_ABLAV).(fmt.Stringer).String():                     P18_ABLAV,
			interface{}(KONZESSIONSABGABE_WECHSEL_RLM).(fmt.Stringer).String(): KONZESSIONSABGABE_WECHSEL_RLM,
		}
	}
}

// MarshalJSON is generated so Sonderrechnungsart satisfies json.Marshaler.
func (r Sonderrechnungsart) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _SonderrechnungsartValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Sonderrechnungsart: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Sonderrechnungsart satisfies json.Unmarshaler.
func (r *Sonderrechnungsart) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Sonderrechnungsart should be a string, got %s", data)
	}
	v, ok := _SonderrechnungsartNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Sonderrechnungsart %q", s)
	}
	*r = v
	return nil
}
