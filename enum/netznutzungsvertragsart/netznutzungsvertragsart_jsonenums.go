// Code generated by jsonenums --type Netznutzungsvertragsart; DO NOT EDIT.

package netznutzungsvertragsart

import (
	"encoding/json"
	"fmt"
)

var (
	_NetznutzungsvertragsartNameToValue = map[string]Netznutzungsvertragsart{
		"KUNDEN_NB":      KUNDEN_NB,
		"LIEFERANTEN_NB": LIEFERANTEN_NB,
	}

	_NetznutzungsvertragsartValueToName = map[Netznutzungsvertragsart]string{
		KUNDEN_NB:      "KUNDEN_NB",
		LIEFERANTEN_NB: "LIEFERANTEN_NB",
	}
)

func init() {
	var v Netznutzungsvertragsart
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_NetznutzungsvertragsartNameToValue = map[string]Netznutzungsvertragsart{
			interface{}(KUNDEN_NB).(fmt.Stringer).String():      KUNDEN_NB,
			interface{}(LIEFERANTEN_NB).(fmt.Stringer).String(): LIEFERANTEN_NB,
		}
	}
}

// MarshalJSON is generated so Netznutzungsvertragsart satisfies json.Marshaler.
func (r Netznutzungsvertragsart) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _NetznutzungsvertragsartValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Netznutzungsvertragsart: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Netznutzungsvertragsart satisfies json.Unmarshaler.
func (r *Netznutzungsvertragsart) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Netznutzungsvertragsart should be a string, got %s", data)
	}
	v, ok := _NetznutzungsvertragsartNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Netznutzungsvertragsart %q", s)
	}
	*r = v
	return nil
}
