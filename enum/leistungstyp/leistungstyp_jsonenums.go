// Code generated by jsonenums --type Leistungstyp; DO NOT EDIT.

package leistungstyp

import (
	"encoding/json"
	"fmt"
)

var (
	_LeistungstypNameToValue = map[string]Leistungstyp{
		"ARBEITSPREIS_WIRKARBEIT":         ARBEITSPREIS_WIRKARBEIT,
		"LEISTUNGSPREIS_WIRKLEISTUNG":     LEISTUNGSPREIS_WIRKLEISTUNG,
		"ARBEITSPREIS_BLINDARBEIT_IND":    ARBEITSPREIS_BLINDARBEIT_IND,
		"ARBEITSPREIS_BLINDARBEIT_KAP":    ARBEITSPREIS_BLINDARBEIT_KAP,
		"GRUNDPREIS":                      GRUNDPREIS,
		"GRUNDPREIS_ARBEIT":               GRUNDPREIS_ARBEIT,
		"GRUNDPREIS_LEISTUNG":             GRUNDPREIS_LEISTUNG,
		"MEHRMINDERMENGE":                 MEHRMINDERMENGE,
		"MESSSTELLENBETRIEB":              MESSSTELLENBETRIEB,
		"MESSDIENSTLEISTUNG":              MESSDIENSTLEISTUNG,
		"MESSDIENSTLEISTUNG_INKL_MESSUNG": MESSDIENSTLEISTUNG_INKL_MESSUNG,
		"ABRECHNUNG":                      ABRECHNUNG,
		"KONZESSIONS_ABGABE":              KONZESSIONS_ABGABE,
		"KWK_UMLAGE":                      KWK_UMLAGE,
		"OFFSHORE_UMLAGE":                 OFFSHORE_UMLAGE,
		"ABLAV_UMLAGE":                    ABLAV_UMLAGE,
		"SONDERKUNDEN_UMLAGE":             SONDERKUNDEN_UMLAGE,
		"REGELENERGIE_UMLAGE":             REGELENERGIE_UMLAGE,
		"BILANZIERUNG_UMLAGE":             BILANZIERUNG_UMLAGE,
		"AUSLESUNG_ZUSAETZLICH":           AUSLESUNG_ZUSAETZLICH,
		"ABLESUNG_ZUSAETZLICH":            ABLESUNG_ZUSAETZLICH,
		"ABRECHNUNG_ZUSAETZLICH":          ABRECHNUNG_ZUSAETZLICH,
		"SPERRUNG":                        SPERRUNG,
		"ENTSPERRUNG":                     ENTSPERRUNG,
		"MAHNKOSTEN":                      MAHNKOSTEN,
		"INKASSOKOSTEN":                   INKASSOKOSTEN,
		"EEG_UMLAGE":                      EEG_UMLAGE,
		"ENERGIESTEUER":                   ENERGIESTEUER,
		"NETZPREIS":                       NETZPREIS,
		"MESSPREIS":                       MESSPREIS,
		"SONSTIGER_PREIS":                 SONSTIGER_PREIS,
	}

	_LeistungstypValueToName = map[Leistungstyp]string{
		ARBEITSPREIS_WIRKARBEIT:         "ARBEITSPREIS_WIRKARBEIT",
		LEISTUNGSPREIS_WIRKLEISTUNG:     "LEISTUNGSPREIS_WIRKLEISTUNG",
		ARBEITSPREIS_BLINDARBEIT_IND:    "ARBEITSPREIS_BLINDARBEIT_IND",
		ARBEITSPREIS_BLINDARBEIT_KAP:    "ARBEITSPREIS_BLINDARBEIT_KAP",
		GRUNDPREIS:                      "GRUNDPREIS",
		GRUNDPREIS_ARBEIT:               "GRUNDPREIS_ARBEIT",
		GRUNDPREIS_LEISTUNG:             "GRUNDPREIS_LEISTUNG",
		MEHRMINDERMENGE:                 "MEHRMINDERMENGE",
		MESSSTELLENBETRIEB:              "MESSSTELLENBETRIEB",
		MESSDIENSTLEISTUNG:              "MESSDIENSTLEISTUNG",
		MESSDIENSTLEISTUNG_INKL_MESSUNG: "MESSDIENSTLEISTUNG_INKL_MESSUNG",
		ABRECHNUNG:                      "ABRECHNUNG",
		KONZESSIONS_ABGABE:              "KONZESSIONS_ABGABE",
		KWK_UMLAGE:                      "KWK_UMLAGE",
		OFFSHORE_UMLAGE:                 "OFFSHORE_UMLAGE",
		ABLAV_UMLAGE:                    "ABLAV_UMLAGE",
		SONDERKUNDEN_UMLAGE:             "SONDERKUNDEN_UMLAGE",
		REGELENERGIE_UMLAGE:             "REGELENERGIE_UMLAGE",
		BILANZIERUNG_UMLAGE:             "BILANZIERUNG_UMLAGE",
		AUSLESUNG_ZUSAETZLICH:           "AUSLESUNG_ZUSAETZLICH",
		ABLESUNG_ZUSAETZLICH:            "ABLESUNG_ZUSAETZLICH",
		ABRECHNUNG_ZUSAETZLICH:          "ABRECHNUNG_ZUSAETZLICH",
		SPERRUNG:                        "SPERRUNG",
		ENTSPERRUNG:                     "ENTSPERRUNG",
		MAHNKOSTEN:                      "MAHNKOSTEN",
		INKASSOKOSTEN:                   "INKASSOKOSTEN",
		EEG_UMLAGE:                      "EEG_UMLAGE",
		ENERGIESTEUER:                   "ENERGIESTEUER",
		NETZPREIS:                       "NETZPREIS",
		MESSPREIS:                       "MESSPREIS",
		SONSTIGER_PREIS:                 "SONSTIGER_PREIS",
	}
)

func init() {
	var v Leistungstyp
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_LeistungstypNameToValue = map[string]Leistungstyp{
			interface{}(ARBEITSPREIS_WIRKARBEIT).(fmt.Stringer).String():         ARBEITSPREIS_WIRKARBEIT,
			interface{}(LEISTUNGSPREIS_WIRKLEISTUNG).(fmt.Stringer).String():     LEISTUNGSPREIS_WIRKLEISTUNG,
			interface{}(ARBEITSPREIS_BLINDARBEIT_IND).(fmt.Stringer).String():    ARBEITSPREIS_BLINDARBEIT_IND,
			interface{}(ARBEITSPREIS_BLINDARBEIT_KAP).(fmt.Stringer).String():    ARBEITSPREIS_BLINDARBEIT_KAP,
			interface{}(GRUNDPREIS).(fmt.Stringer).String():                      GRUNDPREIS,
			interface{}(GRUNDPREIS_ARBEIT).(fmt.Stringer).String():               GRUNDPREIS_ARBEIT,
			interface{}(GRUNDPREIS_LEISTUNG).(fmt.Stringer).String():             GRUNDPREIS_LEISTUNG,
			interface{}(MEHRMINDERMENGE).(fmt.Stringer).String():                 MEHRMINDERMENGE,
			interface{}(MESSSTELLENBETRIEB).(fmt.Stringer).String():              MESSSTELLENBETRIEB,
			interface{}(MESSDIENSTLEISTUNG).(fmt.Stringer).String():              MESSDIENSTLEISTUNG,
			interface{}(MESSDIENSTLEISTUNG_INKL_MESSUNG).(fmt.Stringer).String(): MESSDIENSTLEISTUNG_INKL_MESSUNG,
			interface{}(ABRECHNUNG).(fmt.Stringer).String():                      ABRECHNUNG,
			interface{}(KONZESSIONS_ABGABE).(fmt.Stringer).String():              KONZESSIONS_ABGABE,
			interface{}(KWK_UMLAGE).(fmt.Stringer).String():                      KWK_UMLAGE,
			interface{}(OFFSHORE_UMLAGE).(fmt.Stringer).String():                 OFFSHORE_UMLAGE,
			interface{}(ABLAV_UMLAGE).(fmt.Stringer).String():                    ABLAV_UMLAGE,
			interface{}(SONDERKUNDEN_UMLAGE).(fmt.Stringer).String():             SONDERKUNDEN_UMLAGE,
			interface{}(REGELENERGIE_UMLAGE).(fmt.Stringer).String():             REGELENERGIE_UMLAGE,
			interface{}(BILANZIERUNG_UMLAGE).(fmt.Stringer).String():             BILANZIERUNG_UMLAGE,
			interface{}(AUSLESUNG_ZUSAETZLICH).(fmt.Stringer).String():           AUSLESUNG_ZUSAETZLICH,
			interface{}(ABLESUNG_ZUSAETZLICH).(fmt.Stringer).String():            ABLESUNG_ZUSAETZLICH,
			interface{}(ABRECHNUNG_ZUSAETZLICH).(fmt.Stringer).String():          ABRECHNUNG_ZUSAETZLICH,
			interface{}(SPERRUNG).(fmt.Stringer).String():                        SPERRUNG,
			interface{}(ENTSPERRUNG).(fmt.Stringer).String():                     ENTSPERRUNG,
			interface{}(MAHNKOSTEN).(fmt.Stringer).String():                      MAHNKOSTEN,
			interface{}(INKASSOKOSTEN).(fmt.Stringer).String():                   INKASSOKOSTEN,
			interface{}(EEG_UMLAGE).(fmt.Stringer).String():                      EEG_UMLAGE,
			interface{}(ENERGIESTEUER).(fmt.Stringer).String():                   ENERGIESTEUER,
			interface{}(NETZPREIS).(fmt.Stringer).String():                       NETZPREIS,
			interface{}(MESSPREIS).(fmt.Stringer).String():                       MESSPREIS,
			interface{}(SONSTIGER_PREIS).(fmt.Stringer).String():                 SONSTIGER_PREIS,
		}
	}
}

// MarshalJSON is generated so Leistungstyp satisfies json.Marshaler.
func (r Leistungstyp) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _LeistungstypValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Leistungstyp: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Leistungstyp satisfies json.Unmarshaler.
func (r *Leistungstyp) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Leistungstyp should be a string, got %s", data)
	}
	v, ok := _LeistungstypNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Leistungstyp %q", s)
	}
	*r = v
	return nil
}
