// Code generated by jsonenums --type Netznutzungszahler; DO NOT EDIT.

package netznutzungszahler

import (
	"encoding/json"
	"fmt"
)

var (
	_NetznutzungszahlerNameToValue = map[string]Netznutzungszahler{
		"KUNDE":     KUNDE,
		"LIEFERANT": LIEFERANT,
	}

	_NetznutzungszahlerValueToName = map[Netznutzungszahler]string{
		KUNDE:     "KUNDE",
		LIEFERANT: "LIEFERANT",
	}
)

func init() {
	var v Netznutzungszahler
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_NetznutzungszahlerNameToValue = map[string]Netznutzungszahler{
			interface{}(KUNDE).(fmt.Stringer).String():     KUNDE,
			interface{}(LIEFERANT).(fmt.Stringer).String(): LIEFERANT,
		}
	}
}

// MarshalJSON is generated so Netznutzungszahler satisfies json.Marshaler.
func (r Netznutzungszahler) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _NetznutzungszahlerValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Netznutzungszahler: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Netznutzungszahler satisfies json.Unmarshaler.
func (r *Netznutzungszahler) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Netznutzungszahler should be a string, got %s", data)
	}
	v, ok := _NetznutzungszahlerNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Netznutzungszahler %q", s)
	}
	*r = v
	return nil
}
