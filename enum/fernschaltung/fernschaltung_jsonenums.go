// Code generated by jsonenums --type Fernschaltung; DO NOT EDIT.

package fernschaltung

import (
	"encoding/json"
	"fmt"
)

var (
	_FernschaltungNameToValue = map[string]Fernschaltung{
		"VORHANDEN":       VORHANDEN,
		"NICHT_VORHANDEN": NICHT_VORHANDEN,
	}

	_FernschaltungValueToName = map[Fernschaltung]string{
		VORHANDEN:       "VORHANDEN",
		NICHT_VORHANDEN: "NICHT_VORHANDEN",
	}
)

func init() {
	var v Fernschaltung
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_FernschaltungNameToValue = map[string]Fernschaltung{
			interface{}(VORHANDEN).(fmt.Stringer).String():       VORHANDEN,
			interface{}(NICHT_VORHANDEN).(fmt.Stringer).String(): NICHT_VORHANDEN,
		}
	}
}

// MarshalJSON is generated so Fernschaltung satisfies json.Marshaler.
func (r Fernschaltung) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _FernschaltungValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Fernschaltung: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Fernschaltung satisfies json.Unmarshaler.
func (r *Fernschaltung) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Fernschaltung should be a string, got %s", data)
	}
	v, ok := _FernschaltungNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Fernschaltung %q", s)
	}
	*r = v
	return nil
}
