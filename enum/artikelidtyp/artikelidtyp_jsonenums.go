// Code generated by jsonenums --type ArtikelIdTyp; DO NOT EDIT.

package artikelidtyp

import (
	"encoding/json"
	"fmt"
)

var (
	_ArtikelIdTypNameToValue = map[string]ArtikelIdTyp{
		"ARTIKELID":        ARTIKELID,
		"GRUPPENARTIKELID": GRUPPENARTIKELID,
	}

	_ArtikelIdTypValueToName = map[ArtikelIdTyp]string{
		ARTIKELID:        "ARTIKELID",
		GRUPPENARTIKELID: "GRUPPENARTIKELID",
	}
)

func init() {
	var v ArtikelIdTyp
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ArtikelIdTypNameToValue = map[string]ArtikelIdTyp{
			interface{}(ARTIKELID).(fmt.Stringer).String():        ARTIKELID,
			interface{}(GRUPPENARTIKELID).(fmt.Stringer).String(): GRUPPENARTIKELID,
		}
	}
}

// MarshalJSON is generated so ArtikelIdTyp satisfies json.Marshaler.
func (r ArtikelIdTyp) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ArtikelIdTypValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ArtikelIdTyp: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ArtikelIdTyp satisfies json.Unmarshaler.
func (r *ArtikelIdTyp) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ArtikelIdTyp should be a string, got %s", data)
	}
	v, ok := _ArtikelIdTypNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ArtikelIdTyp %q", s)
	}
	*r = v
	return nil
}
