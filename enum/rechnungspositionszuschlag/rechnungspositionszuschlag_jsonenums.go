// Code generated by jsonenums --type RechnungspositionsZuschlag; DO NOT EDIT.

package rechnungspositionszuschlag

import (
	"encoding/json"
	"fmt"
)

var (
	_RechnungspositionsZuschlagNameToValue = map[string]RechnungspositionsZuschlag{
		"UMSPANNUNGSZUSCHLAG":                       UMSPANNUNGSZUSCHLAG,
		"ALLEIN_GENUTZTE_BETRIEBSMITTEL_STROM_NEV":  ALLEIN_GENUTZTE_BETRIEBSMITTEL_STROM_NEV,
		"ANPASSUNG_STROM_NEV_19_2":                  ANPASSUNG_STROM_NEV_19_2,
		"PAUSCHALE_NETZENTGELTREDUZIERUNG_ENWG_14A": PAUSCHALE_NETZENTGELTREDUZIERUNG_ENWG_14A,
	}

	_RechnungspositionsZuschlagValueToName = map[RechnungspositionsZuschlag]string{
		UMSPANNUNGSZUSCHLAG:                       "UMSPANNUNGSZUSCHLAG",
		ALLEIN_GENUTZTE_BETRIEBSMITTEL_STROM_NEV:  "ALLEIN_GENUTZTE_BETRIEBSMITTEL_STROM_NEV",
		ANPASSUNG_STROM_NEV_19_2:                  "ANPASSUNG_STROM_NEV_19_2",
		PAUSCHALE_NETZENTGELTREDUZIERUNG_ENWG_14A: "PAUSCHALE_NETZENTGELTREDUZIERUNG_ENWG_14A",
	}
)

func init() {
	var v RechnungspositionsZuschlag
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RechnungspositionsZuschlagNameToValue = map[string]RechnungspositionsZuschlag{
			interface{}(UMSPANNUNGSZUSCHLAG).(fmt.Stringer).String():                       UMSPANNUNGSZUSCHLAG,
			interface{}(ALLEIN_GENUTZTE_BETRIEBSMITTEL_STROM_NEV).(fmt.Stringer).String():  ALLEIN_GENUTZTE_BETRIEBSMITTEL_STROM_NEV,
			interface{}(ANPASSUNG_STROM_NEV_19_2).(fmt.Stringer).String():                  ANPASSUNG_STROM_NEV_19_2,
			interface{}(PAUSCHALE_NETZENTGELTREDUZIERUNG_ENWG_14A).(fmt.Stringer).String(): PAUSCHALE_NETZENTGELTREDUZIERUNG_ENWG_14A,
		}
	}
}

// MarshalJSON is generated so RechnungspositionsZuschlag satisfies json.Marshaler.
func (r RechnungspositionsZuschlag) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RechnungspositionsZuschlagValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid RechnungspositionsZuschlag: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so RechnungspositionsZuschlag satisfies json.Unmarshaler.
func (r *RechnungspositionsZuschlag) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RechnungspositionsZuschlag should be a string, got %s", data)
	}
	v, ok := _RechnungspositionsZuschlagNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid RechnungspositionsZuschlag %q", s)
	}
	*r = v
	return nil
}
