// Code generated by jsonenums --type Zeiteinheit; DO NOT EDIT.

package zeiteinheit

import (
	"encoding/json"
	"fmt"
)

var (
	_ZeiteinheitNameToValue = map[string]Zeiteinheit{
		"SEKUNDE":       SEKUNDE,
		"MINUTE":        MINUTE,
		"STUNDE":        STUNDE,
		"VIERTELSTUNDE": VIERTELSTUNDE,
		"TAG":           TAG,
		"WOCHE":         WOCHE,
		"MONAT":         MONAT,
		"QUARTAL":       QUARTAL,
		"HALBJAHR":      HALBJAHR,
		"JAHR":          JAHR,
	}

	_ZeiteinheitValueToName = map[Zeiteinheit]string{
		SEKUNDE:       "SEKUNDE",
		MINUTE:        "MINUTE",
		STUNDE:        "STUNDE",
		VIERTELSTUNDE: "VIERTELSTUNDE",
		TAG:           "TAG",
		WOCHE:         "WOCHE",
		MONAT:         "MONAT",
		QUARTAL:       "QUARTAL",
		HALBJAHR:      "HALBJAHR",
		JAHR:          "JAHR",
	}
)

func init() {
	var v Zeiteinheit
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ZeiteinheitNameToValue = map[string]Zeiteinheit{
			interface{}(SEKUNDE).(fmt.Stringer).String():       SEKUNDE,
			interface{}(MINUTE).(fmt.Stringer).String():        MINUTE,
			interface{}(STUNDE).(fmt.Stringer).String():        STUNDE,
			interface{}(VIERTELSTUNDE).(fmt.Stringer).String(): VIERTELSTUNDE,
			interface{}(TAG).(fmt.Stringer).String():           TAG,
			interface{}(WOCHE).(fmt.Stringer).String():         WOCHE,
			interface{}(MONAT).(fmt.Stringer).String():         MONAT,
			interface{}(QUARTAL).(fmt.Stringer).String():       QUARTAL,
			interface{}(HALBJAHR).(fmt.Stringer).String():      HALBJAHR,
			interface{}(JAHR).(fmt.Stringer).String():          JAHR,
		}
	}
}

// MarshalJSON is generated so Zeiteinheit satisfies json.Marshaler.
func (r Zeiteinheit) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ZeiteinheitValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Zeiteinheit: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Zeiteinheit satisfies json.Unmarshaler.
func (r *Zeiteinheit) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Zeiteinheit should be a string, got %s", data)
	}
	v, ok := _ZeiteinheitNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Zeiteinheit %q", s)
	}
	*r = v
	return nil
}
