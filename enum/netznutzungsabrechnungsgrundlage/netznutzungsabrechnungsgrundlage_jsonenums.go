// Code generated by jsonenums --type Netznutzungsabrechnungsgrundlage; DO NOT EDIT.

package netznutzungsabrechnungsgrundlage

import (
	"encoding/json"
	"fmt"
)

var (
	_NetznutzungsabrechnungsgrundlageNameToValue = map[string]Netznutzungsabrechnungsgrundlage{
		"LIEFERSCHEIN":          LIEFERSCHEIN,
		"ABWEICHENDE_GRUNDLAGE": ABWEICHENDE_GRUNDLAGE,
	}

	_NetznutzungsabrechnungsgrundlageValueToName = map[Netznutzungsabrechnungsgrundlage]string{
		LIEFERSCHEIN:          "LIEFERSCHEIN",
		ABWEICHENDE_GRUNDLAGE: "ABWEICHENDE_GRUNDLAGE",
	}
)

func init() {
	var v Netznutzungsabrechnungsgrundlage
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_NetznutzungsabrechnungsgrundlageNameToValue = map[string]Netznutzungsabrechnungsgrundlage{
			interface{}(LIEFERSCHEIN).(fmt.Stringer).String():          LIEFERSCHEIN,
			interface{}(ABWEICHENDE_GRUNDLAGE).(fmt.Stringer).String(): ABWEICHENDE_GRUNDLAGE,
		}
	}
}

// MarshalJSON is generated so Netznutzungsabrechnungsgrundlage satisfies json.Marshaler.
func (r Netznutzungsabrechnungsgrundlage) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _NetznutzungsabrechnungsgrundlageValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Netznutzungsabrechnungsgrundlage: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Netznutzungsabrechnungsgrundlage satisfies json.Unmarshaler.
func (r *Netznutzungsabrechnungsgrundlage) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Netznutzungsabrechnungsgrundlage should be a string, got %s", data)
	}
	v, ok := _NetznutzungsabrechnungsgrundlageNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Netznutzungsabrechnungsgrundlage %q", s)
	}
	*r = v
	return nil
}
