// Code generated by jsonenums --type Schwachlastfaehigkeit; DO NOT EDIT.

package schwachlastfaehigkeit

import (
	"encoding/json"
	"fmt"
)

var (
	_SchwachlastfaehigkeitNameToValue = map[string]Schwachlastfaehigkeit{
		"SCHWACHLASTFAEHIG":       SCHWACHLASTFAEHIG,
		"NICHT_SCHWACHLASTFAEHIG": NICHT_SCHWACHLASTFAEHIG,
	}

	_SchwachlastfaehigkeitValueToName = map[Schwachlastfaehigkeit]string{
		SCHWACHLASTFAEHIG:       "SCHWACHLASTFAEHIG",
		NICHT_SCHWACHLASTFAEHIG: "NICHT_SCHWACHLASTFAEHIG",
	}
)

func init() {
	var v Schwachlastfaehigkeit
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_SchwachlastfaehigkeitNameToValue = map[string]Schwachlastfaehigkeit{
			interface{}(SCHWACHLASTFAEHIG).(fmt.Stringer).String():       SCHWACHLASTFAEHIG,
			interface{}(NICHT_SCHWACHLASTFAEHIG).(fmt.Stringer).String(): NICHT_SCHWACHLASTFAEHIG,
		}
	}
}

// MarshalJSON is generated so Schwachlastfaehigkeit satisfies json.Marshaler.
func (r Schwachlastfaehigkeit) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _SchwachlastfaehigkeitValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Schwachlastfaehigkeit: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Schwachlastfaehigkeit satisfies json.Unmarshaler.
func (r *Schwachlastfaehigkeit) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Schwachlastfaehigkeit should be a string, got %s", data)
	}
	v, ok := _SchwachlastfaehigkeitNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Schwachlastfaehigkeit %q", s)
	}
	*r = v
	return nil
}
