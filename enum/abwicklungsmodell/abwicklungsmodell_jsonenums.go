// Code generated by jsonenums --type Abwicklungsmodell; DO NOT EDIT.

package abwicklungsmodell

import (
	"encoding/json"
	"fmt"
)

var (
	_AbwicklungsmodellNameToValue = map[string]Abwicklungsmodell{
		"MODELL_1": MODELL_1,
		"MODELL_2": MODELL_2,
	}

	_AbwicklungsmodellValueToName = map[Abwicklungsmodell]string{
		MODELL_1: "MODELL_1",
		MODELL_2: "MODELL_2",
	}
)

func init() {
	var v Abwicklungsmodell
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_AbwicklungsmodellNameToValue = map[string]Abwicklungsmodell{
			interface{}(MODELL_1).(fmt.Stringer).String(): MODELL_1,
			interface{}(MODELL_2).(fmt.Stringer).String(): MODELL_2,
		}
	}
}

// MarshalJSON is generated so Abwicklungsmodell satisfies json.Marshaler.
func (r Abwicklungsmodell) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _AbwicklungsmodellValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Abwicklungsmodell: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Abwicklungsmodell satisfies json.Unmarshaler.
func (r *Abwicklungsmodell) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Abwicklungsmodell should be a string, got %s", data)
	}
	v, ok := _AbwicklungsmodellNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Abwicklungsmodell %q", s)
	}
	*r = v
	return nil
}
