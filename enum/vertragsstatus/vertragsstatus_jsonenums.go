// Code generated by jsonenums --type Vertragsstatus; DO NOT EDIT.

package vertragsstatus

import (
	"encoding/json"
	"fmt"
)

var (
	_VertragsstatusNameToValue = map[string]Vertragsstatus{
		"InArbeit":     InArbeit,
		"Uebermittelt": Uebermittelt,
		"Angenommen":   Angenommen,
		"Aktiv":        Aktiv,
		"Abgelehnt":    Abgelehnt,
		"Widerrufen":   Widerrufen,
		"Storniert":    Storniert,
		"Gekuendigt":   Gekuendigt,
		"Beendet":      Beendet,
	}

	_VertragsstatusValueToName = map[Vertragsstatus]string{
		InArbeit:     "InArbeit",
		Uebermittelt: "Uebermittelt",
		Angenommen:   "Angenommen",
		Aktiv:        "Aktiv",
		Abgelehnt:    "Abgelehnt",
		Widerrufen:   "Widerrufen",
		Storniert:    "Storniert",
		Gekuendigt:   "Gekuendigt",
		Beendet:      "Beendet",
	}
)

func init() {
	var v Vertragsstatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_VertragsstatusNameToValue = map[string]Vertragsstatus{
			interface{}(InArbeit).(fmt.Stringer).String():     InArbeit,
			interface{}(Uebermittelt).(fmt.Stringer).String(): Uebermittelt,
			interface{}(Angenommen).(fmt.Stringer).String():   Angenommen,
			interface{}(Aktiv).(fmt.Stringer).String():        Aktiv,
			interface{}(Abgelehnt).(fmt.Stringer).String():    Abgelehnt,
			interface{}(Widerrufen).(fmt.Stringer).String():   Widerrufen,
			interface{}(Storniert).(fmt.Stringer).String():    Storniert,
			interface{}(Gekuendigt).(fmt.Stringer).String():   Gekuendigt,
			interface{}(Beendet).(fmt.Stringer).String():      Beendet,
		}
	}
}

// MarshalJSON is generated so Vertragsstatus satisfies json.Marshaler.
func (r Vertragsstatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _VertragsstatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Vertragsstatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Vertragsstatus satisfies json.Unmarshaler.
func (r *Vertragsstatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Vertragsstatus should be a string, got %s", data)
	}
	v, ok := _VertragsstatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Vertragsstatus %q", s)
	}
	*r = v
	return nil
}
