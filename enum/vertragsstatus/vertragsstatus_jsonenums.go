// Code generated by jsonenums --type Vertragsstatus; DO NOT EDIT.

package vertragsstatus

import (
	"encoding/json"
	"fmt"
)

var (
	_VertragsstatusNameToValue = map[string]Vertragsstatus{
		"IN_ARBEIT":    IN_ARBEIT,
		"UEBERMITTELT": UEBERMITTELT,
		"ANGENOMMEN":   ANGENOMMEN,
		"AKTIV":        AKTIV,
		"ABGELEHNT":    ABGELEHNT,
		"WIDERRUFEN":   WIDERRUFEN,
		"STORNIERT":    STORNIERT,
		"GEKUENDIGT":   GEKUENDIGT,
		"BEENDET":      BEENDET,
	}

	_VertragsstatusValueToName = map[Vertragsstatus]string{
		IN_ARBEIT:    "IN_ARBEIT",
		UEBERMITTELT: "UEBERMITTELT",
		ANGENOMMEN:   "ANGENOMMEN",
		AKTIV:        "AKTIV",
		ABGELEHNT:    "ABGELEHNT",
		WIDERRUFEN:   "WIDERRUFEN",
		STORNIERT:    "STORNIERT",
		GEKUENDIGT:   "GEKUENDIGT",
		BEENDET:      "BEENDET",
	}
)

func init() {
	var v Vertragsstatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_VertragsstatusNameToValue = map[string]Vertragsstatus{
			interface{}(IN_ARBEIT).(fmt.Stringer).String():    IN_ARBEIT,
			interface{}(UEBERMITTELT).(fmt.Stringer).String(): UEBERMITTELT,
			interface{}(ANGENOMMEN).(fmt.Stringer).String():   ANGENOMMEN,
			interface{}(AKTIV).(fmt.Stringer).String():        AKTIV,
			interface{}(ABGELEHNT).(fmt.Stringer).String():    ABGELEHNT,
			interface{}(WIDERRUFEN).(fmt.Stringer).String():   WIDERRUFEN,
			interface{}(STORNIERT).(fmt.Stringer).String():    STORNIERT,
			interface{}(GEKUENDIGT).(fmt.Stringer).String():   GEKUENDIGT,
			interface{}(BEENDET).(fmt.Stringer).String():      BEENDET,
		}
	}
}

// MarshalJSON is generated so Vertragsstatus satisfies json.Marshaler.
func (r Vertragsstatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _VertragsstatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Vertragsstatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Vertragsstatus satisfies json.Unmarshaler.
func (r *Vertragsstatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Vertragsstatus should be a string, got %s", data)
	}
	v, ok := _VertragsstatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Vertragsstatus %q", s)
	}
	*r = v
	return nil
}
