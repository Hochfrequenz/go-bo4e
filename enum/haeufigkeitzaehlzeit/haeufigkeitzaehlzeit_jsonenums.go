// Code generated by jsonenums --type HaeufigkeitZaehlzeit; DO NOT EDIT.

package haeufigkeitzaehlzeit

import (
	"encoding/json"
	"fmt"
)

var (
	_HaeufigkeitZaehlzeitNameToValue = map[string]HaeufigkeitZaehlzeit{
		"EINMALIG":  EINMALIG,
		"JAEHRLICH": JAEHRLICH,
	}

	_HaeufigkeitZaehlzeitValueToName = map[HaeufigkeitZaehlzeit]string{
		EINMALIG:  "EINMALIG",
		JAEHRLICH: "JAEHRLICH",
	}
)

func init() {
	var v HaeufigkeitZaehlzeit
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_HaeufigkeitZaehlzeitNameToValue = map[string]HaeufigkeitZaehlzeit{
			interface{}(EINMALIG).(fmt.Stringer).String():  EINMALIG,
			interface{}(JAEHRLICH).(fmt.Stringer).String(): JAEHRLICH,
		}
	}
}

// MarshalJSON is generated so HaeufigkeitZaehlzeit satisfies json.Marshaler.
func (r HaeufigkeitZaehlzeit) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _HaeufigkeitZaehlzeitValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid HaeufigkeitZaehlzeit: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so HaeufigkeitZaehlzeit satisfies json.Unmarshaler.
func (r *HaeufigkeitZaehlzeit) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("HaeufigkeitZaehlzeit should be a string, got %s", data)
	}
	v, ok := _HaeufigkeitZaehlzeitNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid HaeufigkeitZaehlzeit %q", s)
	}
	*r = v
	return nil
}
