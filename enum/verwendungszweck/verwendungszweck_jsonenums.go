// Code generated by jsonenums --type Verwendungszweck; DO NOT EDIT.

package verwendungszweck

import (
	"encoding/json"
	"fmt"
)

var (
	_VerwendungszweckNameToValue = map[string]Verwendungszweck{
		"NETZNUTZUNGSABRECHNUNG":                  NETZNUTZUNGSABRECHNUNG,
		"BILANZKREISABRECHNUNG":                   BILANZKREISABRECHNUNG,
		"MEHRMINDERMENGENABRECHNUNG":              MEHRMINDERMENGENABRECHNUNG,
		"ENDKUNDENABRECHNUNG":                     ENDKUNDENABRECHNUNG,
		"UEBERMITTLUNG_AN_DAS_HKNR":               UEBERMITTLUNG_AN_DAS_HKNR,
		"ERMITTLUNG_AUSGEGLICHENHEIT_BILANZKREIS": ERMITTLUNG_AUSGEGLICHENHEIT_BILANZKREIS,
	}

	_VerwendungszweckValueToName = map[Verwendungszweck]string{
		NETZNUTZUNGSABRECHNUNG:                  "NETZNUTZUNGSABRECHNUNG",
		BILANZKREISABRECHNUNG:                   "BILANZKREISABRECHNUNG",
		MEHRMINDERMENGENABRECHNUNG:              "MEHRMINDERMENGENABRECHNUNG",
		ENDKUNDENABRECHNUNG:                     "ENDKUNDENABRECHNUNG",
		UEBERMITTLUNG_AN_DAS_HKNR:               "UEBERMITTLUNG_AN_DAS_HKNR",
		ERMITTLUNG_AUSGEGLICHENHEIT_BILANZKREIS: "ERMITTLUNG_AUSGEGLICHENHEIT_BILANZKREIS",
	}
)

func init() {
	var v Verwendungszweck
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_VerwendungszweckNameToValue = map[string]Verwendungszweck{
			interface{}(NETZNUTZUNGSABRECHNUNG).(fmt.Stringer).String():                  NETZNUTZUNGSABRECHNUNG,
			interface{}(BILANZKREISABRECHNUNG).(fmt.Stringer).String():                   BILANZKREISABRECHNUNG,
			interface{}(MEHRMINDERMENGENABRECHNUNG).(fmt.Stringer).String():              MEHRMINDERMENGENABRECHNUNG,
			interface{}(ENDKUNDENABRECHNUNG).(fmt.Stringer).String():                     ENDKUNDENABRECHNUNG,
			interface{}(UEBERMITTLUNG_AN_DAS_HKNR).(fmt.Stringer).String():               UEBERMITTLUNG_AN_DAS_HKNR,
			interface{}(ERMITTLUNG_AUSGEGLICHENHEIT_BILANZKREIS).(fmt.Stringer).String(): ERMITTLUNG_AUSGEGLICHENHEIT_BILANZKREIS,
		}
	}
}

// MarshalJSON is generated so Verwendungszweck satisfies json.Marshaler.
func (r Verwendungszweck) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _VerwendungszweckValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Verwendungszweck: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Verwendungszweck satisfies json.Unmarshaler.
func (r *Verwendungszweck) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Verwendungszweck should be a string, got %s", data)
	}
	v, ok := _VerwendungszweckNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Verwendungszweck %q", s)
	}
	*r = v
	return nil
}
