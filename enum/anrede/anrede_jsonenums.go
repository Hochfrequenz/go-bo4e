// Code generated by jsonenums --type Anrede; DO NOT EDIT.

package anrede

import (
	"encoding/json"
	"fmt"
)

var (
	_AnredeNameToValue = map[string]Anrede{
		"HERR":             HERR,
		"FRAU":             FRAU,
		"DIVERS":           DIVERS,
		"EHELEUTE":         EHELEUTE,
		"FIRMA":            FIRMA,
		"WOHNGEMEINSCHAFT": WOHNGEMEINSCHAFT,
		"INDIVIDUELL":      INDIVIDUELL,
	}

	_AnredeValueToName = map[Anrede]string{
		HERR:             "HERR",
		FRAU:             "FRAU",
		DIVERS:           "DIVERS",
		EHELEUTE:         "EHELEUTE",
		FIRMA:            "FIRMA",
		WOHNGEMEINSCHAFT: "WOHNGEMEINSCHAFT",
		INDIVIDUELL:      "INDIVIDUELL",
	}
)

func init() {
	var v Anrede
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_AnredeNameToValue = map[string]Anrede{
			interface{}(HERR).(fmt.Stringer).String():             HERR,
			interface{}(FRAU).(fmt.Stringer).String():             FRAU,
			interface{}(DIVERS).(fmt.Stringer).String():           DIVERS,
			interface{}(EHELEUTE).(fmt.Stringer).String():         EHELEUTE,
			interface{}(FIRMA).(fmt.Stringer).String():            FIRMA,
			interface{}(WOHNGEMEINSCHAFT).(fmt.Stringer).String(): WOHNGEMEINSCHAFT,
			interface{}(INDIVIDUELL).(fmt.Stringer).String():      INDIVIDUELL,
		}
	}
}

// MarshalJSON is generated so Anrede satisfies json.Marshaler.
func (r Anrede) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _AnredeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Anrede: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Anrede satisfies json.Unmarshaler.
func (r *Anrede) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Anrede should be a string, got %s", data)
	}
	v, ok := _AnredeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Anrede %q", s)
	}
	*r = v
	return nil
}
