// Code generated by jsonenums --type Anrede; DO NOT EDIT.

package anrede

import (
	"encoding/json"
	"fmt"
)

var (
	_AnredeNameToValue = map[string]Anrede{
		"Herr":             Herr,
		"Frau":             Frau,
		"Divers":           Divers,
		"Eheleute":         Eheleute,
		"Firma":            Firma,
		"Wohngemeinschaft": Wohngemeinschaft,
		"Individuell":      Individuell,
	}

	_AnredeValueToName = map[Anrede]string{
		Herr:             "Herr",
		Frau:             "Frau",
		Divers:           "Divers",
		Eheleute:         "Eheleute",
		Firma:            "Firma",
		Wohngemeinschaft: "Wohngemeinschaft",
		Individuell:      "Individuell",
	}
)

func init() {
	var v Anrede
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_AnredeNameToValue = map[string]Anrede{
			interface{}(Herr).(fmt.Stringer).String():             Herr,
			interface{}(Frau).(fmt.Stringer).String():             Frau,
			interface{}(Divers).(fmt.Stringer).String():           Divers,
			interface{}(Eheleute).(fmt.Stringer).String():         Eheleute,
			interface{}(Firma).(fmt.Stringer).String():            Firma,
			interface{}(Wohngemeinschaft).(fmt.Stringer).String(): Wohngemeinschaft,
			interface{}(Individuell).(fmt.Stringer).String():      Individuell,
		}
	}
}

// MarshalJSON is generated so Anrede satisfies json.Marshaler.
func (r Anrede) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _AnredeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Anrede: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Anrede satisfies json.Unmarshaler.
func (r *Anrede) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Anrede should be a string, got %s", data)
	}
	v, ok := _AnredeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Anrede %q", s)
	}
	*r = v
	return nil
}
