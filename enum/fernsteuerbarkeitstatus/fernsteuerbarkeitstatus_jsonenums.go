// Code generated by jsonenums --type FernsteuerbarkeitStatus; DO NOT EDIT.

package fernsteuerbarkeitstatus

import (
	"encoding/json"
	"fmt"
)

var (
	_FernsteuerbarkeitStatusNameToValue = map[string]FernsteuerbarkeitStatus{
		"NICHT_FERNSTEUERBAR":     NICHT_FERNSTEUERBAR,
		"TECHNISCH_FERNSTEUERBAR": TECHNISCH_FERNSTEUERBAR,
		"LIEFERANT_FERNSTEUERBAR": LIEFERANT_FERNSTEUERBAR,
	}

	_FernsteuerbarkeitStatusValueToName = map[FernsteuerbarkeitStatus]string{
		NICHT_FERNSTEUERBAR:     "NICHT_FERNSTEUERBAR",
		TECHNISCH_FERNSTEUERBAR: "TECHNISCH_FERNSTEUERBAR",
		LIEFERANT_FERNSTEUERBAR: "LIEFERANT_FERNSTEUERBAR",
	}
)

func init() {
	var v FernsteuerbarkeitStatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_FernsteuerbarkeitStatusNameToValue = map[string]FernsteuerbarkeitStatus{
			interface{}(NICHT_FERNSTEUERBAR).(fmt.Stringer).String():     NICHT_FERNSTEUERBAR,
			interface{}(TECHNISCH_FERNSTEUERBAR).(fmt.Stringer).String(): TECHNISCH_FERNSTEUERBAR,
			interface{}(LIEFERANT_FERNSTEUERBAR).(fmt.Stringer).String(): LIEFERANT_FERNSTEUERBAR,
		}
	}
}

// MarshalJSON is generated so FernsteuerbarkeitStatus satisfies json.Marshaler.
func (r FernsteuerbarkeitStatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _FernsteuerbarkeitStatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid FernsteuerbarkeitStatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so FernsteuerbarkeitStatus satisfies json.Unmarshaler.
func (r *FernsteuerbarkeitStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FernsteuerbarkeitStatus should be a string, got %s", data)
	}
	v, ok := _FernsteuerbarkeitStatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid FernsteuerbarkeitStatus %q", s)
	}
	*r = v
	return nil
}
