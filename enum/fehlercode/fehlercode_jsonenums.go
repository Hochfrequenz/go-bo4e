// Code generated by jsonenums --type FehlerCode; DO NOT EDIT.

package fehlercode

import (
	"encoding/json"
	"fmt"
)

var (
	_FehlerCodeNameToValue = map[string]FehlerCode{
		"ID_UNBEKANNT":                      ID_UNBEKANNT,
		"ABSENDER_NICHT_ZUGEORDNET":         ABSENDER_NICHT_ZUGEORDNET,
		"EMPFAENGER_NICHT_ZUGEORDNET":       EMPFAENGER_NICHT_ZUGEORDNET,
		"GERAET_UNBEKANNT":                  GERAET_UNBEKANNT,
		"OBIS_UNBEKANNT":                    OBIS_UNBEKANNT,
		"REFERENZIERUNG_FEHLERHAFT":         REFERENZIERUNG_FEHLERHAFT,
		"TUPEL_UNBEKANNT":                   TUPEL_UNBEKANNT,
		"ABSENDER_TUPEL_NICHT_ZUGEORDNET":   ABSENDER_TUPEL_NICHT_ZUGEORDNET,
		"EMPFAENGER_TUPEL_NICHT_ZUGEORDNET": EMPFAENGER_TUPEL_NICHT_ZUGEORDNET,
		"VORKOMMA_ZU_VIELE_STELLEN":         VORKOMMA_ZU_VIELE_STELLEN,
		"ZEITREIHE_UNVOLLSTAENDIG":          ZEITREIHE_UNVOLLSTAENDIG,
		"REFERENZIERTES_TUPEL_UNBEKANNT":    REFERENZIERTES_TUPEL_UNBEKANNT,
		"MARKTLOKATION_UNBEKANNT":           MARKTLOKATION_UNBEKANNT,
		"MESSLOKATION_UNBEKANNT":            MESSLOKATION_UNBEKANNT,
		"MELDEPUNKT_NICHT_MEHR_IM_NETZ":     MELDEPUNKT_NICHT_MEHR_IM_NETZ,
		"ERFORDERLICHE_ANGABE_FEHLT":        ERFORDERLICHE_ANGABE_FEHLT,
		"GESCHAEFTSVORFALL_ZURUECKGEWIESEN": GESCHAEFTSVORFALL_ZURUECKGEWIESEN,
		"ZEITINTERVALL_NEGATIV":             ZEITINTERVALL_NEGATIV,
		"FORMAT_NICHT_EINGEHALTEN":          FORMAT_NICHT_EINGEHALTEN,
		"GESCHAEFTSVORFALL_ABSENDER":        GESCHAEFTSVORFALL_ABSENDER,
	}

	_FehlerCodeValueToName = map[FehlerCode]string{
		ID_UNBEKANNT:                      "ID_UNBEKANNT",
		ABSENDER_NICHT_ZUGEORDNET:         "ABSENDER_NICHT_ZUGEORDNET",
		EMPFAENGER_NICHT_ZUGEORDNET:       "EMPFAENGER_NICHT_ZUGEORDNET",
		GERAET_UNBEKANNT:                  "GERAET_UNBEKANNT",
		OBIS_UNBEKANNT:                    "OBIS_UNBEKANNT",
		REFERENZIERUNG_FEHLERHAFT:         "REFERENZIERUNG_FEHLERHAFT",
		TUPEL_UNBEKANNT:                   "TUPEL_UNBEKANNT",
		ABSENDER_TUPEL_NICHT_ZUGEORDNET:   "ABSENDER_TUPEL_NICHT_ZUGEORDNET",
		EMPFAENGER_TUPEL_NICHT_ZUGEORDNET: "EMPFAENGER_TUPEL_NICHT_ZUGEORDNET",
		VORKOMMA_ZU_VIELE_STELLEN:         "VORKOMMA_ZU_VIELE_STELLEN",
		ZEITREIHE_UNVOLLSTAENDIG:          "ZEITREIHE_UNVOLLSTAENDIG",
		REFERENZIERTES_TUPEL_UNBEKANNT:    "REFERENZIERTES_TUPEL_UNBEKANNT",
		MARKTLOKATION_UNBEKANNT:           "MARKTLOKATION_UNBEKANNT",
		MESSLOKATION_UNBEKANNT:            "MESSLOKATION_UNBEKANNT",
		MELDEPUNKT_NICHT_MEHR_IM_NETZ:     "MELDEPUNKT_NICHT_MEHR_IM_NETZ",
		ERFORDERLICHE_ANGABE_FEHLT:        "ERFORDERLICHE_ANGABE_FEHLT",
		GESCHAEFTSVORFALL_ZURUECKGEWIESEN: "GESCHAEFTSVORFALL_ZURUECKGEWIESEN",
		ZEITINTERVALL_NEGATIV:             "ZEITINTERVALL_NEGATIV",
		FORMAT_NICHT_EINGEHALTEN:          "FORMAT_NICHT_EINGEHALTEN",
		GESCHAEFTSVORFALL_ABSENDER:        "GESCHAEFTSVORFALL_ABSENDER",
	}
)

func init() {
	var v FehlerCode
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_FehlerCodeNameToValue = map[string]FehlerCode{
			interface{}(ID_UNBEKANNT).(fmt.Stringer).String():                      ID_UNBEKANNT,
			interface{}(ABSENDER_NICHT_ZUGEORDNET).(fmt.Stringer).String():         ABSENDER_NICHT_ZUGEORDNET,
			interface{}(EMPFAENGER_NICHT_ZUGEORDNET).(fmt.Stringer).String():       EMPFAENGER_NICHT_ZUGEORDNET,
			interface{}(GERAET_UNBEKANNT).(fmt.Stringer).String():                  GERAET_UNBEKANNT,
			interface{}(OBIS_UNBEKANNT).(fmt.Stringer).String():                    OBIS_UNBEKANNT,
			interface{}(REFERENZIERUNG_FEHLERHAFT).(fmt.Stringer).String():         REFERENZIERUNG_FEHLERHAFT,
			interface{}(TUPEL_UNBEKANNT).(fmt.Stringer).String():                   TUPEL_UNBEKANNT,
			interface{}(ABSENDER_TUPEL_NICHT_ZUGEORDNET).(fmt.Stringer).String():   ABSENDER_TUPEL_NICHT_ZUGEORDNET,
			interface{}(EMPFAENGER_TUPEL_NICHT_ZUGEORDNET).(fmt.Stringer).String(): EMPFAENGER_TUPEL_NICHT_ZUGEORDNET,
			interface{}(VORKOMMA_ZU_VIELE_STELLEN).(fmt.Stringer).String():         VORKOMMA_ZU_VIELE_STELLEN,
			interface{}(ZEITREIHE_UNVOLLSTAENDIG).(fmt.Stringer).String():          ZEITREIHE_UNVOLLSTAENDIG,
			interface{}(REFERENZIERTES_TUPEL_UNBEKANNT).(fmt.Stringer).String():    REFERENZIERTES_TUPEL_UNBEKANNT,
			interface{}(MARKTLOKATION_UNBEKANNT).(fmt.Stringer).String():           MARKTLOKATION_UNBEKANNT,
			interface{}(MESSLOKATION_UNBEKANNT).(fmt.Stringer).String():            MESSLOKATION_UNBEKANNT,
			interface{}(MELDEPUNKT_NICHT_MEHR_IM_NETZ).(fmt.Stringer).String():     MELDEPUNKT_NICHT_MEHR_IM_NETZ,
			interface{}(ERFORDERLICHE_ANGABE_FEHLT).(fmt.Stringer).String():        ERFORDERLICHE_ANGABE_FEHLT,
			interface{}(GESCHAEFTSVORFALL_ZURUECKGEWIESEN).(fmt.Stringer).String(): GESCHAEFTSVORFALL_ZURUECKGEWIESEN,
			interface{}(ZEITINTERVALL_NEGATIV).(fmt.Stringer).String():             ZEITINTERVALL_NEGATIV,
			interface{}(FORMAT_NICHT_EINGEHALTEN).(fmt.Stringer).String():          FORMAT_NICHT_EINGEHALTEN,
			interface{}(GESCHAEFTSVORFALL_ABSENDER).(fmt.Stringer).String():        GESCHAEFTSVORFALL_ABSENDER,
		}
	}
}

// MarshalJSON is generated so FehlerCode satisfies json.Marshaler.
func (r FehlerCode) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _FehlerCodeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid FehlerCode: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so FehlerCode satisfies json.Unmarshaler.
func (r *FehlerCode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FehlerCode should be a string, got %s", data)
	}
	v, ok := _FehlerCodeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid FehlerCode %q", s)
	}
	*r = v
	return nil
}
