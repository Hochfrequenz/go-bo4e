// Code generated by jsonenums --type Zaehlerauspraegung; DO NOT EDIT.

package zaehlerauspraegung

import (
	"encoding/json"
	"fmt"
)

var (
	_ZaehlerauspraegungNameToValue = map[string]Zaehlerauspraegung{
		"EINRICHTUNGSZAEHLER":  EINRICHTUNGSZAEHLER,
		"ZWEIRICHTUNGSZAEHLER": ZWEIRICHTUNGSZAEHLER,
	}

	_ZaehlerauspraegungValueToName = map[Zaehlerauspraegung]string{
		EINRICHTUNGSZAEHLER:  "EINRICHTUNGSZAEHLER",
		ZWEIRICHTUNGSZAEHLER: "ZWEIRICHTUNGSZAEHLER",
	}
)

func init() {
	var v Zaehlerauspraegung
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ZaehlerauspraegungNameToValue = map[string]Zaehlerauspraegung{
			interface{}(EINRICHTUNGSZAEHLER).(fmt.Stringer).String():  EINRICHTUNGSZAEHLER,
			interface{}(ZWEIRICHTUNGSZAEHLER).(fmt.Stringer).String(): ZWEIRICHTUNGSZAEHLER,
		}
	}
}

// MarshalJSON is generated so Zaehlerauspraegung satisfies json.Marshaler.
func (r Zaehlerauspraegung) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ZaehlerauspraegungValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Zaehlerauspraegung: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Zaehlerauspraegung satisfies json.Unmarshaler.
func (r *Zaehlerauspraegung) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Zaehlerauspraegung should be a string, got %s", data)
	}
	v, ok := _ZaehlerauspraegungNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Zaehlerauspraegung %q", s)
	}
	*r = v
	return nil
}
