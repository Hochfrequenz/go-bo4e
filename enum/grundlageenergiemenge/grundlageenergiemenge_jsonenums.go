// Code generated by jsonenums --type GrundlageEnergiemenge; DO NOT EDIT.

package grundlageenergiemenge

import (
	"encoding/json"
	"fmt"
)

var (
	_GrundlageEnergiemengeNameToValue = map[string]GrundlageEnergiemenge{
		"ZAEHLERSTAND_ZUM_BEGINN_DER_ANGEGEBENEN_ENERGIEMENGE_VORHANDEN_UND_KOMMUNIZIERT":         ZAEHLERSTAND_ZUM_BEGINN_DER_ANGEGEBENEN_ENERGIEMENGE_VORHANDEN_UND_KOMMUNIZIERT,
		"ZAEHLERSTAND_ZUM_ENDE_DER_ANGEGEBENEN_ENERGIEMENGE_VORHANDEN_UND_KOMMUNIZIERT":           ZAEHLERSTAND_ZUM_ENDE_DER_ANGEGEBENEN_ENERGIEMENGE_VORHANDEN_UND_KOMMUNIZIERT,
		"ZAEHLERSTAND_ZUM_BEGIN_DER_ANGEGEBENEN_ENERGIEMENGE_NICHT_VORHANDEN_DA_MENGENABGRENZUNG": ZAEHLERSTAND_ZUM_BEGIN_DER_ANGEGEBENEN_ENERGIEMENGE_NICHT_VORHANDEN_DA_MENGENABGRENZUNG,
		"ZAEHLERSTAND_ZUM_ENDE_DER_ANGEGEBENEN_ENERGIEMENGE_NICHT_VORHANDEN_DA_MENGENABGRENZUNG":  ZAEHLERSTAND_ZUM_ENDE_DER_ANGEGEBENEN_ENERGIEMENGE_NICHT_VORHANDEN_DA_MENGENABGRENZUNG,
	}

	_GrundlageEnergiemengeValueToName = map[GrundlageEnergiemenge]string{
		ZAEHLERSTAND_ZUM_BEGINN_DER_ANGEGEBENEN_ENERGIEMENGE_VORHANDEN_UND_KOMMUNIZIERT:         "ZAEHLERSTAND_ZUM_BEGINN_DER_ANGEGEBENEN_ENERGIEMENGE_VORHANDEN_UND_KOMMUNIZIERT",
		ZAEHLERSTAND_ZUM_ENDE_DER_ANGEGEBENEN_ENERGIEMENGE_VORHANDEN_UND_KOMMUNIZIERT:           "ZAEHLERSTAND_ZUM_ENDE_DER_ANGEGEBENEN_ENERGIEMENGE_VORHANDEN_UND_KOMMUNIZIERT",
		ZAEHLERSTAND_ZUM_BEGIN_DER_ANGEGEBENEN_ENERGIEMENGE_NICHT_VORHANDEN_DA_MENGENABGRENZUNG: "ZAEHLERSTAND_ZUM_BEGIN_DER_ANGEGEBENEN_ENERGIEMENGE_NICHT_VORHANDEN_DA_MENGENABGRENZUNG",
		ZAEHLERSTAND_ZUM_ENDE_DER_ANGEGEBENEN_ENERGIEMENGE_NICHT_VORHANDEN_DA_MENGENABGRENZUNG:  "ZAEHLERSTAND_ZUM_ENDE_DER_ANGEGEBENEN_ENERGIEMENGE_NICHT_VORHANDEN_DA_MENGENABGRENZUNG",
	}
)

func init() {
	var v GrundlageEnergiemenge
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_GrundlageEnergiemengeNameToValue = map[string]GrundlageEnergiemenge{
			interface{}(ZAEHLERSTAND_ZUM_BEGINN_DER_ANGEGEBENEN_ENERGIEMENGE_VORHANDEN_UND_KOMMUNIZIERT).(fmt.Stringer).String():         ZAEHLERSTAND_ZUM_BEGINN_DER_ANGEGEBENEN_ENERGIEMENGE_VORHANDEN_UND_KOMMUNIZIERT,
			interface{}(ZAEHLERSTAND_ZUM_ENDE_DER_ANGEGEBENEN_ENERGIEMENGE_VORHANDEN_UND_KOMMUNIZIERT).(fmt.Stringer).String():           ZAEHLERSTAND_ZUM_ENDE_DER_ANGEGEBENEN_ENERGIEMENGE_VORHANDEN_UND_KOMMUNIZIERT,
			interface{}(ZAEHLERSTAND_ZUM_BEGIN_DER_ANGEGEBENEN_ENERGIEMENGE_NICHT_VORHANDEN_DA_MENGENABGRENZUNG).(fmt.Stringer).String(): ZAEHLERSTAND_ZUM_BEGIN_DER_ANGEGEBENEN_ENERGIEMENGE_NICHT_VORHANDEN_DA_MENGENABGRENZUNG,
			interface{}(ZAEHLERSTAND_ZUM_ENDE_DER_ANGEGEBENEN_ENERGIEMENGE_NICHT_VORHANDEN_DA_MENGENABGRENZUNG).(fmt.Stringer).String():  ZAEHLERSTAND_ZUM_ENDE_DER_ANGEGEBENEN_ENERGIEMENGE_NICHT_VORHANDEN_DA_MENGENABGRENZUNG,
		}
	}
}

// MarshalJSON is generated so GrundlageEnergiemenge satisfies json.Marshaler.
func (r GrundlageEnergiemenge) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _GrundlageEnergiemengeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid GrundlageEnergiemenge: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so GrundlageEnergiemenge satisfies json.Unmarshaler.
func (r *GrundlageEnergiemenge) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("GrundlageEnergiemenge should be a string, got %s", data)
	}
	v, ok := _GrundlageEnergiemengeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid GrundlageEnergiemenge %q", s)
	}
	*r = v
	return nil
}
