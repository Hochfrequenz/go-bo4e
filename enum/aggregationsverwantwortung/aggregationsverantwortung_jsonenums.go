// Code generated by jsonenums --type Aggregationsverantwortung; DO NOT EDIT.

package aggregationsverantwortung

import (
	"encoding/json"
	"fmt"
)

var (
	_AggregationsverantwortungNameToValue = map[string]Aggregationsverantwortung{
		"UENB": UENB,
		"VNB":  VNB,
	}

	_AggregationsverantwortungValueToName = map[Aggregationsverantwortung]string{
		UENB: "UENB",
		VNB:  "VNB",
	}
)

func init() {
	var v Aggregationsverantwortung
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_AggregationsverantwortungNameToValue = map[string]Aggregationsverantwortung{
			interface{}(UENB).(fmt.Stringer).String(): UENB,
			interface{}(VNB).(fmt.Stringer).String():  VNB,
		}
	}
}

// MarshalJSON is generated so Aggregationsverantwortung satisfies json.Marshaler.
func (r Aggregationsverantwortung) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _AggregationsverantwortungValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Aggregationsverantwortung: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Aggregationsverantwortung satisfies json.Unmarshaler.
func (r *Aggregationsverantwortung) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Aggregationsverantwortung should be a string, got %s", data)
	}
	v, ok := _AggregationsverantwortungNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Aggregationsverantwortung %q", s)
	}
	*r = v
	return nil
}
