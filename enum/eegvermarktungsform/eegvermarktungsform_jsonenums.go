// Code generated by jsonenums --type EEGVermarktungsform; DO NOT EDIT.

package eegvermarktungsform

import (
	"encoding/json"
	"fmt"
)

var (
	_EEGVermarktungsformNameToValue = map[string]EEGVermarktungsform{
		"AUSFALLVERGUETUNG": AUSFALLVERGUETUNG,
		"MARKTPRAEMIE":      MARKTPRAEMIE,
		"SONSTIGE":          SONSTIGE,
		"KWKG_VERGUETUNG":   KWKG_VERGUETUNG,
	}

	_EEGVermarktungsformValueToName = map[EEGVermarktungsform]string{
		AUSFALLVERGUETUNG: "AUSFALLVERGUETUNG",
		MARKTPRAEMIE:      "MARKTPRAEMIE",
		SONSTIGE:          "SONSTIGE",
		KWKG_VERGUETUNG:   "KWKG_VERGUETUNG",
	}
)

func init() {
	var v EEGVermarktungsform
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_EEGVermarktungsformNameToValue = map[string]EEGVermarktungsform{
			interface{}(AUSFALLVERGUETUNG).(fmt.Stringer).String(): AUSFALLVERGUETUNG,
			interface{}(MARKTPRAEMIE).(fmt.Stringer).String():      MARKTPRAEMIE,
			interface{}(SONSTIGE).(fmt.Stringer).String():          SONSTIGE,
			interface{}(KWKG_VERGUETUNG).(fmt.Stringer).String():   KWKG_VERGUETUNG,
		}
	}
}

// MarshalJSON is generated so EEGVermarktungsform satisfies json.Marshaler.
func (r EEGVermarktungsform) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _EEGVermarktungsformValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid EEGVermarktungsform: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so EEGVermarktungsform satisfies json.Unmarshaler.
func (r *EEGVermarktungsform) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EEGVermarktungsform should be a string, got %s", data)
	}
	v, ok := _EEGVermarktungsformNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid EEGVermarktungsform %q", s)
	}
	*r = v
	return nil
}
