// Code generated by jsonenums --type Tarifart; DO NOT EDIT.

package tarifart

import (
	"encoding/json"
	"fmt"
)

var (
	_TarifartNameToValue = map[string]Tarifart{
		"EINTARIF":          EINTARIF,
		"ZWEITARIF":         ZWEITARIF,
		"MEHRTARIF":         MEHRTARIF,
		"SMARTMETER":        SMARTMETER,
		"LEISTUNGSGEMESSEN": LEISTUNGSGEMESSEN,
	}

	_TarifartValueToName = map[Tarifart]string{
		EINTARIF:          "EINTARIF",
		ZWEITARIF:         "ZWEITARIF",
		MEHRTARIF:         "MEHRTARIF",
		SMARTMETER:        "SMARTMETER",
		LEISTUNGSGEMESSEN: "LEISTUNGSGEMESSEN",
	}
)

func init() {
	var v Tarifart
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_TarifartNameToValue = map[string]Tarifart{
			interface{}(EINTARIF).(fmt.Stringer).String():          EINTARIF,
			interface{}(ZWEITARIF).(fmt.Stringer).String():         ZWEITARIF,
			interface{}(MEHRTARIF).(fmt.Stringer).String():         MEHRTARIF,
			interface{}(SMARTMETER).(fmt.Stringer).String():        SMARTMETER,
			interface{}(LEISTUNGSGEMESSEN).(fmt.Stringer).String(): LEISTUNGSGEMESSEN,
		}
	}
}

// MarshalJSON is generated so Tarifart satisfies json.Marshaler.
func (r Tarifart) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _TarifartValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Tarifart: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Tarifart satisfies json.Unmarshaler.
func (r *Tarifart) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Tarifart should be a string, got %s", data)
	}
	v, ok := _TarifartNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Tarifart %q", s)
	}
	*r = v
	return nil
}
