// Code generated by jsonenums --type Geschaeftspartnerrolle; DO NOT EDIT.

package geschaeftspartnerrolle

import (
	"encoding/json"
	"fmt"
)

var (
	_GeschaeftspartnerrolleNameToValue = map[string]Geschaeftspartnerrolle{
		"LIEFERANT":     LIEFERANT,
		"DIENSTLEISTER": DIENSTLEISTER,
		"KUNDE":         KUNDE,
		"INTERESSENT":   INTERESSENT,
		"MARKTPARTNER":  MARKTPARTNER,
	}

	_GeschaeftspartnerrolleValueToName = map[Geschaeftspartnerrolle]string{
		LIEFERANT:     "LIEFERANT",
		DIENSTLEISTER: "DIENSTLEISTER",
		KUNDE:         "KUNDE",
		INTERESSENT:   "INTERESSENT",
		MARKTPARTNER:  "MARKTPARTNER",
	}
)

func init() {
	var v Geschaeftspartnerrolle
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_GeschaeftspartnerrolleNameToValue = map[string]Geschaeftspartnerrolle{
			interface{}(LIEFERANT).(fmt.Stringer).String():     LIEFERANT,
			interface{}(DIENSTLEISTER).(fmt.Stringer).String(): DIENSTLEISTER,
			interface{}(KUNDE).(fmt.Stringer).String():         KUNDE,
			interface{}(INTERESSENT).(fmt.Stringer).String():   INTERESSENT,
			interface{}(MARKTPARTNER).(fmt.Stringer).String():  MARKTPARTNER,
		}
	}
}

// MarshalJSON is generated so Geschaeftspartnerrolle satisfies json.Marshaler.
func (r Geschaeftspartnerrolle) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _GeschaeftspartnerrolleValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Geschaeftspartnerrolle: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Geschaeftspartnerrolle satisfies json.Unmarshaler.
func (r *Geschaeftspartnerrolle) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Geschaeftspartnerrolle should be a string, got %s", data)
	}
	v, ok := _GeschaeftspartnerrolleNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Geschaeftspartnerrolle %q", s)
	}
	*r = v
	return nil
}
