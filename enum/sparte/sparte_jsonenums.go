// Code generated by jsonenums --type Sparte; DO NOT EDIT.

package sparte

import (
	"encoding/json"
	"fmt"
)

var (
	_SparteNameToValue = map[string]Sparte{
		"Strom":      Strom,
		"Gas":        Gas,
		"Fernwaerme": Fernwaerme,
		"Nahwaerme":  Nahwaerme,
		"Wasser":     Wasser,
		"Abwasser":   Abwasser,
	}

	_SparteValueToName = map[Sparte]string{
		Strom:      "Strom",
		Gas:        "Gas",
		Fernwaerme: "Fernwaerme",
		Nahwaerme:  "Nahwaerme",
		Wasser:     "Wasser",
		Abwasser:   "Abwasser",
	}
)

func init() {
	var v Sparte
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_SparteNameToValue = map[string]Sparte{
			interface{}(Strom).(fmt.Stringer).String():      Strom,
			interface{}(Gas).(fmt.Stringer).String():        Gas,
			interface{}(Fernwaerme).(fmt.Stringer).String(): Fernwaerme,
			interface{}(Nahwaerme).(fmt.Stringer).String():  Nahwaerme,
			interface{}(Wasser).(fmt.Stringer).String():     Wasser,
			interface{}(Abwasser).(fmt.Stringer).String():   Abwasser,
		}
	}
}

// MarshalJSON is generated so Sparte satisfies json.Marshaler.
func (r Sparte) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _SparteValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Sparte: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Sparte satisfies json.Unmarshaler.
func (r *Sparte) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Sparte should be a string, got %s", data)
	}
	v, ok := _SparteNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Sparte %q", s)
	}
	*r = v
	return nil
}
