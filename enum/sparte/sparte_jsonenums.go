// Code generated by jsonenums --type Sparte; DO NOT EDIT.

package sparte

import (
	"encoding/json"
	"fmt"
)

var (
	_SparteNameToValue = map[string]Sparte{
		"STROM":      STROM,
		"GAS":        GAS,
		"FERNWAERME": FERNWAERME,
		"NAHWAERME":  NAHWAERME,
		"WASSER":     WASSER,
		"ABWASSER":   ABWASSER,
	}

	_SparteValueToName = map[Sparte]string{
		STROM:      "STROM",
		GAS:        "GAS",
		FERNWAERME: "FERNWAERME",
		NAHWAERME:  "NAHWAERME",
		WASSER:     "WASSER",
		ABWASSER:   "ABWASSER",
	}
)

func init() {
	var v Sparte
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_SparteNameToValue = map[string]Sparte{
			interface{}(STROM).(fmt.Stringer).String():      STROM,
			interface{}(GAS).(fmt.Stringer).String():        GAS,
			interface{}(FERNWAERME).(fmt.Stringer).String(): FERNWAERME,
			interface{}(NAHWAERME).(fmt.Stringer).String():  NAHWAERME,
			interface{}(WASSER).(fmt.Stringer).String():     WASSER,
			interface{}(ABWASSER).(fmt.Stringer).String():   ABWASSER,
		}
	}
}

// MarshalJSON is generated so Sparte satisfies json.Marshaler.
func (r Sparte) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _SparteValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Sparte: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Sparte satisfies json.Unmarshaler.
func (r *Sparte) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Sparte should be a string, got %s", data)
	}
	v, ok := _SparteNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Sparte %q", s)
	}
	*r = v
	return nil
}
