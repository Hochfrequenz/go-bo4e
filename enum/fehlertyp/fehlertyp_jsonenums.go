// Code generated by jsonenums --type FehlerTyp; DO NOT EDIT.

package fehlertyp

import (
	"encoding/json"
	"fmt"
)

var (
	_FehlerTypNameToValue = map[string]FehlerTyp{
		"SYNTAX":       SYNTAX,
		"VERARBEITUNG": VERARBEITUNG,
	}

	_FehlerTypValueToName = map[FehlerTyp]string{
		SYNTAX:       "SYNTAX",
		VERARBEITUNG: "VERARBEITUNG",
	}
)

func init() {
	var v FehlerTyp
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_FehlerTypNameToValue = map[string]FehlerTyp{
			interface{}(SYNTAX).(fmt.Stringer).String():       SYNTAX,
			interface{}(VERARBEITUNG).(fmt.Stringer).String(): VERARBEITUNG,
		}
	}
}

// MarshalJSON is generated so FehlerTyp satisfies json.Marshaler.
func (r FehlerTyp) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _FehlerTypValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid FehlerTyp: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so FehlerTyp satisfies json.Unmarshaler.
func (r *FehlerTyp) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FehlerTyp should be a string, got %s", data)
	}
	v, ok := _FehlerTypNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid FehlerTyp %q", s)
	}
	*r = v
	return nil
}
