// Code generated by jsonenums --type Preisstatus; DO NOT EDIT.

package preisstatus

import (
	"encoding/json"
	"fmt"
)

var (
	_PreisstatusNameToValue = map[string]Preisstatus{
		"VORLAUEFIG": VORLAUEFIG,
		"ENDGUELTIG": ENDGUELTIG,
	}

	_PreisstatusValueToName = map[Preisstatus]string{
		VORLAUEFIG: "VORLAUEFIG",
		ENDGUELTIG: "ENDGUELTIG",
	}
)

func init() {
	var v Preisstatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PreisstatusNameToValue = map[string]Preisstatus{
			interface{}(VORLAUEFIG).(fmt.Stringer).String(): VORLAUEFIG,
			interface{}(ENDGUELTIG).(fmt.Stringer).String(): ENDGUELTIG,
		}
	}
}

// MarshalJSON is generated so Preisstatus satisfies json.Marshaler.
func (r Preisstatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PreisstatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Preisstatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Preisstatus satisfies json.Unmarshaler.
func (r *Preisstatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Preisstatus should be a string, got %s", data)
	}
	v, ok := _PreisstatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Preisstatus %q", s)
	}
	*r = v
	return nil
}
